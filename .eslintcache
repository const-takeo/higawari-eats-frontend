[{"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx":"1","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts":"2","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx":"3","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts":"4","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx":"5","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx":"6","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx":"7","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx":"8","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx":"9","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx":"10","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts":"11"},{"size":588,"mtime":1611482864802,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1611383438987,"results":"14","hashOfConfig":"13"},{"size":486,"mtime":1611482901061,"results":"15","hashOfConfig":"13"},{"size":481,"mtime":1611457353058,"results":"16","hashOfConfig":"13"},{"size":310,"mtime":1611457823598,"results":"17","hashOfConfig":"13"},{"size":4101,"mtime":1611551894870,"results":"18","hashOfConfig":"13"},{"size":619,"mtime":1611415477967,"results":"19","hashOfConfig":"13"},{"size":3968,"mtime":1611556377493,"results":"20","hashOfConfig":"13"},{"size":241,"mtime":1611550490314,"results":"21","hashOfConfig":"13"},{"size":506,"mtime":1611546035583,"results":"22","hashOfConfig":"13"},{"size":706,"mtime":1611554950561,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o4rm3h",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts",[],["51","52"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts",[],["53","54"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx",["55"],"import Helmet from \"react-helmet\";\nimport higawariLogo from \"../images/logo.svg\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport {\n  LoginMutation,\n  LoginMutationVariables,\n} from \"../__generated__/LoginMutation\";\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\n\ninterface ILoginForm {\n  email: string;\n  password: string;\n}\n\nconst LOGIN_MUTAITION = gql`\n  mutation LoginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      error\n      ok\n      token\n    }\n  }\n`;\n\nconst Login = () => {\n  const {\n    register,\n    getValues,\n    handleSubmit,\n    errors,\n    formState,\n  } = useForm<ILoginForm>({\n    mode: \"onChange\",\n  });\n  const onCompleted = (data: LoginMutation) => {\n    const {\n      login: { ok, token },\n    } = data;\n    if (ok) {\n      console.log(token);\n    }\n  };\n  //useMutationの１番目のargsはmutation function, triggerの役割を果たす。\n  //useMutationの2番目のargsはobject, {error, loading, data}\n  const [loginTrg, { data: loginMutationResult, loading }] = useMutation<\n    LoginMutation,\n    LoginMutationVariables\n  >(LOGIN_MUTAITION, { onCompleted });\n  const onSubmit = () => {\n    if (!loading) {\n      const { email, password } = getValues();\n      loginTrg({\n        variables: {\n          loginInput: {\n            email,\n            password,\n          },\n        },\n      });\n    }\n  };\n  return (\n    <div className=\"h-screen flex flex-col items-center mt-5 lg:mt-28\">\n      <Helmet>\n        <title>Higawari Eats | Login</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center px-5\">\n        <img src={higawariLogo} className=\" w-72 mb-5\" />\n        <h4 className=\"w-full text-left font-medium text-2xl mb-5\">\n          ご利用いただきありがとうございます\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-4\"\n        >\n          <input\n            ref={register({\n              required: \"メールを入力して下さい。\",\n              pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            })}\n            required\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"メール\"\n            className=\"inputCss\"\n          />\n          {errors.email?.type === \"pattern\" && (\n            <FormError\n              errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n            />\n          )}\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          <input\n            ref={register({\n              required: \"パスワードを入力して下さい。\",\n              minLength: 4,\n            })}\n            required\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"パスワード\"\n            className=\"inputCss\"\n          />\n          {errors.password?.type === \"minLength\" && (\n            <FormError\n              errorMessage={\"パスワードを10文字以上入力して下さい。\"}\n            />\n          )}\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText=\"LogIn\"\n          />\n          {loginMutationResult?.login.error && (\n            <FormError errorMessage={loginMutationResult.login.error} />\n          )}\n        </form>\n        <div>\n          Higawariのご利用は初めてですか?{\" \"}\n          <Link\n            to=\"create-account\"\n            className=\"text-yellow-600 text-opacity-75 hover:underline\"\n          >\n            アカウントを作成\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx",[],["56","57"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx",["58","59","60"],"import Helmet from \"react-helmet\";\nimport higawariLogo from \"../images/logo.svg\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\nimport { UserRole } from \"../__generated__/globalTypes\";\n\ninterface CreateAccountForm {\n  email: string;\n  password: string;\n  role: UserRole;\n}\n\nconst CREATE_ACCOUNT_MUTAITION = gql`\n  mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      error\n      ok\n    }\n  }\n`;\n\nconst CreateAccount = () => {\n  const {\n    register,\n    getValues,\n    handleSubmit,\n    watch,\n    errors,\n    formState,\n  } = useForm<CreateAccountForm>({\n    mode: \"onChange\",\n    defaultValues: {\n      role: UserRole.Client,\n    },\n  });\n  //useMutationの１番目のargsはmutation function, triggerの役割を果たす。\n  //useMutationの2番目のargsはobject, {error, loading, data}\n  const [createAccountMutation] = useMutation(CREATE_ACCOUNT_MUTAITION);\n  const onSubmit = () => {};\n  console.log(watch());\n  return (\n    <div className=\"h-screen flex flex-col items-center mt-5 lg:mt-28\">\n      <Helmet>\n        <title>Higawari Eats | Create Account</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center px-5\">\n        <img\n          src={higawariLogo}\n          className=\" w-72 mb-5 text-yellow-600 text-opacity-75\"\n        />\n        <h4 className=\"w-full text-left font-medium text-2xl mb-5\">\n          さあ始めましょう\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-4\"\n        >\n          <input\n            ref={register({\n              required: \"メールを入力して下さい。\",\n              pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            })}\n            required\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"メール\"\n            className=\"inputCss\"\n          />\n          {errors.email?.type === \"pattern\" && (\n            <FormError\n              errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n            />\n          )}\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          <input\n            ref={register({\n              required: \"パスワードを入力して下さい。\",\n              minLength: 4,\n            })}\n            required\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"パスワード\"\n            className=\"inputCss\"\n          />\n          {errors.password?.type === \"minLength\" && (\n            <FormError\n              errorMessage={\"パスワードを10文字以上入力して下さい。\"}\n            />\n          )}\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          <select\n            className=\"inputCss\"\n            name=\"role\"\n            ref={register({\n              required: true,\n            })}\n          >\n            {Object.keys(UserRole).map((role) => (\n              <option>{role}</option>\n            ))}\n          </select>\n          <Button\n            canClick={formState.isValid}\n            loading={false}\n            actionText=\"生成\"\n          />\n        </form>\n        <div>\n          既にアカウントをお持ちでしょうか?{\" \"}\n          <Link\n            to=\"/login\"\n            className=\"text-yellow-600 text-opacity-75 hover:underline\"\n          >\n            ログイン\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateAccount;\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"61","replacedBy":"65"},{"ruleId":"63","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":72,"column":9,"nodeType":"69","endLine":72,"endColumn":58},{"ruleId":"61","replacedBy":"70"},{"ruleId":"63","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":29,"column":5,"nodeType":"74","messageId":"75","endLine":29,"endColumn":14},{"ruleId":"72","severity":1,"message":"76","line":42,"column":10,"nodeType":"74","messageId":"75","endLine":42,"endColumn":31},{"ruleId":"67","severity":1,"message":"68","line":51,"column":9,"nodeType":"69","endLine":54,"endColumn":11},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],["77"],["78"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["77"],["78"],"@typescript-eslint/no-unused-vars","'getValues' is assigned a value but never used.","Identifier","unusedVar","'createAccountMutation' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]