[{"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx":"1","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts":"2","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx":"3","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts":"4","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx":"5","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx":"6","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx":"7","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx":"8","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx":"9","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx":"10","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx":"11","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx":"12","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/header.tsx":"13","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/confirm-email.tsx":"14","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/hooks/useMe.tsx":"15","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/edit-profile.tsx":"16","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/restaurant.tsx":"17","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/search.tsx":"18","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/constants.ts":"19","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/fragments.ts":"20","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/category.tsx":"21","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurant.tsx":"22","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/category-list.tsx":"23","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/my-restaurants.tsx":"24","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/add-restaurants.tsx":"25","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/my-restaurant.tsx":"26","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/add-menu.tsx":"27","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/dish.tsx":"28","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/dish-option.tsx":"29","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/order.tsx":"30","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/driver/dashboard.tsx":"31","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts":"32"},{"size":588,"mtime":1611482864802,"results":"33","hashOfConfig":"34"},{"size":425,"mtime":1611383438987,"results":"35","hashOfConfig":"34"},{"size":584,"mtime":1611623515161,"results":"36","hashOfConfig":"34"},{"size":1857,"mtime":1615530007259,"results":"37","hashOfConfig":"34"},{"size":3858,"mtime":1615362860292,"results":"38","hashOfConfig":"34"},{"size":4311,"mtime":1613479691338,"results":"39","hashOfConfig":"34"},{"size":725,"mtime":1611573678115,"results":"40","hashOfConfig":"34"},{"size":4836,"mtime":1613711181835,"results":"41","hashOfConfig":"34"},{"size":239,"mtime":1611672055964,"results":"42","hashOfConfig":"34"},{"size":506,"mtime":1611666849342,"results":"43","hashOfConfig":"34"},{"size":690,"mtime":1613023633564,"results":"44","hashOfConfig":"34"},{"size":3888,"mtime":1613717834282,"results":"45","hashOfConfig":"34"},{"size":1707,"mtime":1613727095968,"results":"46","hashOfConfig":"34"},{"size":2161,"mtime":1613023676199,"results":"47","hashOfConfig":"34"},{"size":311,"mtime":1611630339155,"results":"48","hashOfConfig":"34"},{"size":3676,"mtime":1613023712379,"results":"49","hashOfConfig":"34"},{"size":702,"mtime":1613720132288,"results":"50","hashOfConfig":"34"},{"size":1533,"mtime":1613714291778,"results":"51","hashOfConfig":"34"},{"size":52,"mtime":1611571007862,"results":"52","hashOfConfig":"34"},{"size":951,"mtime":1615273308960,"results":"53","hashOfConfig":"34"},{"size":1104,"mtime":1613718127644,"results":"54","hashOfConfig":"34"},{"size":6709,"mtime":1615358954597,"results":"55","hashOfConfig":"34"},{"size":934,"mtime":1613715629549,"results":"56","hashOfConfig":"34"},{"size":1792,"mtime":1614943801946,"results":"57","hashOfConfig":"34"},{"size":4786,"mtime":1614950313796,"results":"58","hashOfConfig":"34"},{"size":5250,"mtime":1615359607973,"results":"59","hashOfConfig":"34"},{"size":5515,"mtime":1614957933396,"results":"60","hashOfConfig":"34"},{"size":1647,"mtime":1615116821824,"results":"61","hashOfConfig":"34"},{"size":856,"mtime":1615120709941,"results":"62","hashOfConfig":"34"},{"size":5751,"mtime":1615525934274,"results":"63","hashOfConfig":"34"},{"size":5496,"mtime":1615525530274,"results":"64","hashOfConfig":"34"},{"size":2356,"mtime":1615521825194,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1uta326",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"71"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"117"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx",[],["149","150"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts",[],["151","152"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx",[],["153","154"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx",["155"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx",["156"],"import { Helmet } from \"react-helmet-async\";\nimport higawariLogo from \"../images/logo.svg\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport { Button } from \"../components/button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserRole } from \"../__generated__/globalTypes\";\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from \"../__generated__/createAccountMutation\";\n\ninterface CreateAccountForm {\n  email: string;\n  password: string;\n  role: UserRole;\n}\n\nconst CREATE_ACCOUNT_MUTAITION = gql`\n  mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      error\n      ok\n    }\n  }\n`;\n\nconst CreateAccount = () => {\n  const {\n    register,\n    getValues,\n    handleSubmit,\n    errors,\n    formState,\n  } = useForm<CreateAccountForm>({\n    mode: \"onChange\",\n    defaultValues: {\n      role: UserRole.Client,\n    },\n  });\n  const history = useHistory();\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok },\n    } = data;\n    if (ok) {\n      history.push(\"/\");\n    }\n  };\n  //useMutationの１番目のargsはmutation function, triggerの役割を果たす。\n  //useMutationの2番目のargsはobject, {error, loading, data}\n  const [\n    createAccountMutation,\n    { loading, error, data: createAccountResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREATE_ACCOUNT_MUTAITION,\n    { onCompleted }\n  );\n  const onSubmit = () => {\n    const { email, password, role } = getValues();\n    if (!loading) {\n      createAccountMutation({\n        variables: {\n          createAccountInput: {\n            email,\n            password,\n            role,\n          },\n        },\n      });\n    }\n  };\n  return (\n    <div className=\"h-screen flex flex-col items-center mt-5 lg:mt-28\">\n      <Helmet>\n        <title>Create Account | Higawari Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center px-5\">\n        <img\n          src={higawariLogo}\n          className=\" w-72 mb-5\"\n          alt=\"Higawari-eats-logo\"\n        />\n        <h4 className=\"w-full text-left font-medium text-2xl mb-5\">\n          さあ始めましょう\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-4\"\n        >\n          <input\n            ref={register({\n              required: \"メールを入力して下さい。\",\n              pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            })}\n            required\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"メール\"\n            className=\"inputCss\"\n          />\n          {errors.email?.type === \"pattern\" && (\n            <FormError\n              errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n            />\n          )}\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          <input\n            ref={register({\n              required: \"パスワードを入力して下さい。\",\n              minLength: 4,\n            })}\n            required\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"パスワード\"\n            className=\"inputCss\"\n          />\n          {errors.password?.type === \"minLength\" && (\n            <FormError\n              errorMessage={\"パスワードを10文字以上入力して下さい。\"}\n            />\n          )}\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          <select\n            className=\"inputCss\"\n            name=\"role\"\n            ref={register({\n              required: true,\n            })}\n          >\n            {Object.keys(UserRole).map((role, index) => (\n              <option key={index}>{role}</option>\n            ))}\n          </select>\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText=\"生成\"\n          />\n          {createAccountResult?.createAccount.error && (\n            <FormError errorMessage={createAccountResult.createAccount.error} />\n          )}\n        </form>\n        <div>\n          既にアカウントをお持ちでしょうか?{\" \"}\n          <Link\n            to=\"/\"\n            className=\"text-yellow-600 text-opacity-75 hover:underline\"\n          >\n            ログイン\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateAccount;\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx",[],["157","158"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/header.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/confirm-email.tsx",["159","160","161","162"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useMe } from \"../../hooks/useMe\";\nimport {\n  verifyEmail,\n  verifyEmailVariables,\n} from \"../../__generated__/verifyEmail\";\n\nconst VERIFY_EMAIL_MUTATION = gql`\n  mutation verifyEmail($input: VerifyEmailInput!) {\n    verifyEmail(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\nexport const ConfirmEmail = () => {\n  const history = useHistory();\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n  const onCompleted = (data: verifyEmail) => {\n    const {\n      verifyEmail: { error, ok },\n    } = data;\n    if (ok && userData?.me.id) {\n      //cacheを直接じゃなくてrefetchしてアップデートする方法\n      // await refetch(); Promiseを返す、const { data: userData, refetch } = useMe();\n      //cacheを直接修正する方法\n      client.writeFragment({\n        id: `UserEntity:${userData.me.id}`,\n        fragment: gql`\n          fragment VerifiedUser on UserEntity {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      history.push(\"/\");\n    }\n  };\n  const [verifyTrg] = useMutation<verifyEmail, verifyEmailVariables>(\n    VERIFY_EMAIL_MUTATION,\n    {\n      onCompleted,\n    }\n  );\n  // hrefのコードを持ってくる１番目のoption\n  // const location = useLocation();\n  useEffect(() => {\n    // console.log(location.search);\n    const [_, code] = window.location.href.split(\"confirm?=\");\n    verifyTrg({\n      variables: {\n        input: {\n          code,\n        },\n      },\n    });\n  }, []);\n  return (\n    <div className=\"flex flex-col text-center h-screen mt-60\">\n      <Helmet>\n        <title>Verify Email | Higawari Eats</title>\n      </Helmet>\n      <h2 className=\"text-lg font-semibold mb-2\">\n        アカウントを認証しています。\n      </h2>\n      <h4 className=\"text-gray-700\">\n        少々お待ちください。このページから離れないでください。\n      </h4>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/hooks/useMe.tsx",["163"],"import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { meQuery } from \"../__generated__/meQuery\";\n\n\nconst ME_QUERY = gql`\n  query meQuery {\n    me {\n      id\n      email\n      role\n      verified\n    }\n  }\n`;\n\nexport const useMe = () => {\n    return useQuery<meQuery>(ME_QUERY);\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/edit-profile.tsx",["164","165"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"../../components/button\";\nimport { FormError } from \"../../components/form-error\";\nimport { useMe } from \"../../hooks/useMe\";\nimport {\n  editProfile,\n  editProfileVariables,\n} from \"../../__generated__/editProfile\";\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfile($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\ninterface IFormProps {\n  email?: string;\n  password?: string;\n}\n\nexport const EditProfile = () => {\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    errors,\n  } = useForm<IFormProps>({\n    mode: \"onChange\",\n    defaultValues: {\n      email: userData?.me.email,\n    },\n  });\n  const onSubmit = () => {\n    const { email, password } = getValues();\n    editProfileTrg({\n      variables: {\n        input: {\n          email,\n          ...(password !== \"\" && { password }),\n        },\n      },\n    });\n  };\n  const onCompleted = (data: editProfile) => {\n    const {\n      editProfile: { ok },\n    } = data;\n    if (ok && userData) {\n      const {\n        me: { email: prevEmail, id },\n      } = userData;\n      const { email: newEmail } = getValues();\n      if (prevEmail !== newEmail) {\n        client.writeFragment({\n          id: `UserEntity:${id}`,\n          fragment: gql`\n            fragment EditedUser on UserEntity {\n              verified\n              email\n            }\n          `,\n          data: {\n            email: newEmail,\n            verified: false,\n          },\n        });\n      }\n    }\n  };\n  const [editProfileTrg, { data, loading, error }] = useMutation<\n    editProfile,\n    editProfileVariables\n  >(EDIT_PROFILE_MUTATION, {\n    onCompleted,\n  });\n  return (\n    <div className=\"flex flex-col h-screen mt-52 items-center px-5\">\n      <Helmet>\n        <title>Edit Profile | Higawari Eats</title>\n      </Helmet>\n      <h4 className=\"font-semibold text-2xl mb-3\">プロフィール</h4>\n      <form\n        className=\"grid gap-3 mt-5 w-full max-w-screen-sm mb-4\"\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <input\n          ref={register({\n            required: \"メールを入力して下さい。\",\n            pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          })}\n          required\n          name=\"email\"\n          placeholder=\"メール\"\n          type=\"email\"\n          className=\"inputCss\"\n        />\n        {errors.email?.type === \"pattern\" && (\n          <FormError\n            errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n          />\n        )}\n        {errors.email?.message && (\n          <FormError errorMessage={errors.email?.message} />\n        )}\n        <input\n          ref={register({\n            minLength: 8,\n          })}\n          name=\"password\"\n          placeholder=\"パスワード\"\n          type=\"password\"\n          className=\"inputCss\"\n        />\n        {errors.password?.type === \"minLength\" && (\n          <FormError errorMessage={\"パスワードを8文字以上入力して下さい。\"} />\n        )}\n        {errors.password?.message && (\n          <FormError errorMessage={errors.password?.message} />\n        )}\n        <Button\n          canClick={formState.isValid}\n          loading={loading}\n          actionText={\"更新\"}\n        />\n      </form>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/restaurant.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/search.tsx",["166","167"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport {\n  searchRestaurant,\n  searchRestaurantVariables,\n} from \"../../__generated__/searchRestaurant\";\n\nconst SEARCH_RESTAURANT = gql`\n  query searchRestaurant($input: SearchRestaurantInput!) {\n    searchRestaurant(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\nexport const Search = () => {\n  const history = useHistory();\n  const location = useLocation();\n  //lazy query\n  //lazy queryは一般的なqueryとは違う物を返す => queryTuple\n  const [queryReady, { loading, data, called }] = useLazyQuery<\n    searchRestaurant,\n    searchRestaurantVariables\n  >(SEARCH_RESTAURANT);\n  useEffect(() => {\n    const [_, query] = location.search.split(\"?term=\");\n    if (!query) {\n      //history.push & history.replaceの違いはreplaceの場合history APIに追加されない（履歴）\n      return history.replace(\"/\");\n    }\n    queryReady({\n      variables: {\n        input: {\n          page: 1,\n          query,\n        },\n      },\n    });\n  }, [history, location.search]);\n  console.log(loading, data, called);\n  return (\n    <div>\n      <Helmet>\n        <title>Search | Higawari Eats</title>\n      </Helmet>\n      search page\n    </div>\n  );\n};\n",["168","169"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/constants.ts",[],["170","171"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/fragments.ts",[],["172","173"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/category.tsx",["174","175"],"import { gql, useQuery } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { category, categoryVariables } from \"../../__generated__/category\";\n\nconst CATEGORY_QUERY = gql`\n  query category($input: CategoryInput!) {\n    category(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n      category {\n        ...CategoryParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${CATEGORY_FRAGMENT}\n`;\n\ninterface IPProps {\n  slug: string;\n}\n\nexport const Category = () => {\n  //   const location = useLocation();\n  //onlyパラメーターだけ欲しい時,useLocationより楽\n  const params = useParams<IPProps>();\n  const { data, loading } = useQuery<category, categoryVariables>(\n    CATEGORY_QUERY,\n    {\n      variables: {\n        input: {\n          slug: params.slug,\n          page: 1,\n        },\n      },\n    }\n  );\n  console.log(data, loading);\n  return <div>Category</div>;\n};\n",["176","177"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurant.tsx",["178","179","180"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Dish } from \"../../components/dish\";\nimport { DishOptions } from \"../../components/dish-option\";\nimport { MENU_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport {\n  createOrder,\n  createOrderVariables,\n} from \"../../__generated__/createOrder\";\nimport { CreateOrderItemInput } from \"../../__generated__/globalTypes\";\nimport {\n  restaurant,\n  restaurantVariables,\n} from \"../../__generated__/restaurant\";\n\nconst RESTAURANT_QUERY = gql`\n  query restaurant($input: RestaurantInput!) {\n    restaurant(input: $input) {\n      error\n      ok\n      restaurant {\n        ...RestaurantParts\n        menu {\n          ...MenuParts\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${MENU_FRAGMENT}\n`;\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      error\n      ok\n      orderId\n    }\n  }\n`;\n\ninterface IPProps {\n  id: string;\n}\n\nexport const Restaurant = () => {\n  const params = useParams<IPProps>();\n  //useQuery\n  const { data, loading } = useQuery<restaurant, restaurantVariables>(\n    RESTAURANT_QUERY,\n    {\n      variables: {\n        input: {\n          restaurantId: parseInt(params.id),\n        },\n      },\n    }\n  );\n  //useState\n  const [order, setOrder] = useState(false);\n  const [orderItems, setOrderItems] = useState<CreateOrderItemInput[]>([]);\n  //method\n  const getItem = (dishId: number) => {\n    return orderItems.find((order) => order.dishId === dishId);\n  };\n  const orderTrigger = () => {\n    setOrder(true);\n  };\n  const addItem = (dishId: number) => {\n    if (orderItems.find((order) => order.dishId === dishId)) {\n      return;\n    }\n    setOrderItems((current) => [{ dishId, options: [] }, ...current]);\n  };\n  const removeItem = (dishId: number) => {\n    setOrderItems((current) =>\n      current.filter((dish) => dish.dishId !== dishId)\n    );\n  };\n  const isSelected = (dishId: number) => {\n    return Boolean(getItem(dishId));\n  };\n  const addOption = (dishId: number, optionName: string) => {\n    if (!isSelected(dishId)) {\n      return;\n    }\n    //stateをmutateするのではなく新しくしてまたreturnするために\n    const oldOne = getItem(dishId);\n    if (oldOne) {\n      const hasOption = Boolean(\n        oldOne.options?.find((oldOption) => oldOption.name === optionName)\n      );\n      if (!hasOption) {\n        removeItem(dishId);\n        setOrderItems((current) => [\n          { dishId, options: [{ name: optionName }, ...oldOne.options!] },\n          ...current,\n        ]);\n      }\n    }\n  };\n  const getOptionFromItem = (\n    item: CreateOrderItemInput,\n    optionName: string\n  ) => {\n    return item.options?.find((option) => option.name === optionName);\n  };\n  const isOptionSelected = (dishId: number, optionName: string) => {\n    const item = getItem(dishId);\n    if (item) {\n      return Boolean(getOptionFromItem(item, optionName));\n    }\n    return false;\n  };\n  const removeOptionFromItem = (dishId: number, optionName: string) => {\n    if (!isSelected(dishId)) {\n      return;\n    }\n    const oldOne = getItem(dishId);\n    if (oldOne) {\n      removeItem(dishId);\n      setOrderItems((current) => [\n        {\n          dishId,\n          options: oldOne.options?.filter(\n            (option) => option.name !== optionName\n          ),\n        },\n        ...current,\n      ]);\n      return;\n    }\n  };\n  const cancelOrder = () => {\n    setOrder(false);\n    setOrderItems([]);\n  };\n  const confirmOrder = () => {\n    console.log(\"click\", orderItems);\n\n    if (orderItems.length === 0) {\n      alert(\"nonono\");\n      return;\n    }\n    const ok = window.confirm(\"are you sure?\");\n    if (ok) {\n      createOrderMutation({\n        variables: {\n          input: {\n            restaurantId: +params.id,\n            items: orderItems,\n          },\n        },\n      });\n    }\n  };\n  //useHistory\n  const history = useHistory();\n  //onCompleted\n  const onCompleted = (data: createOrder) => {\n    const {\n      createOrder: { ok, orderId },\n    } = data;\n    if (ok) {\n      history.push(`/orders/${orderId}`);\n    }\n  };\n  //useMutation\n  const [\n    createOrderMutation,\n    { data: mutationData, loading: placingOrder },\n  ] = useMutation<createOrder, createOrderVariables>(CREATE_ORDER_MUTATION, {\n    onCompleted,\n  });\n\n  //render\n  return (\n    <div>\n      <div\n        className=\"bg-cover bg-center mx-auto max-w-screen-2xl bg-gray-500 bg-cover bg-center py-40\"\n        style={{\n          backgroundImage: `url(${data?.restaurant.restaurant?.coverImg})`,\n        }}\n      >\n        <div className=\"bg-white bg-opacity-90 w-2/6 py-8 ml-1 pl-1\">\n          <h4 className=\"text-3xl mb-3\">{data?.restaurant.restaurant?.name}</h4>\n          <h5 className=\"text-sm font-light mb-1\">\n            {data?.restaurant.restaurant?.category?.name}\n          </h5>\n          <h5 className=\"text-sm font-light\">\n            {data?.restaurant.restaurant?.address}\n          </h5>\n        </div>\n      </div>\n      <div className=\"commonContainer pb-32 flex flex-col items-end mt-20\">\n        {!order && (\n          <button onClick={orderTrigger} className=\"btn px-10\">\n            注文スタート\n          </button>\n        )}\n        {order && (\n          <div className=\"flex items-center\">\n            <button onClick={confirmOrder} className=\"btn px-10 mr-3\">\n              確定\n            </button>\n            <button onClick={cancelOrder} className=\"btn px-10\">\n              取消\n            </button>\n          </div>\n        )}\n\n        <div className=\"w-full md:grid grid-cols-3 gap-x-7 gap-y-10 mt-16\">\n          {data?.restaurant.restaurant?.menu.map((menu) => (\n            <Dish\n              removeItem={removeItem}\n              isSelected={isSelected(menu.id)}\n              id={menu.id}\n              addItem={addItem}\n              order={order}\n              isCoustomer={true}\n              name={menu.name}\n              description={menu.description}\n              price={menu.price}\n              options={menu.options}\n            >\n              {menu.options?.map((option, index) => (\n                <DishOptions\n                  index={index}\n                  key={index}\n                  dishId={menu.id}\n                  isSelected={isOptionSelected(menu.id, option.name)}\n                  name={option.name}\n                  extra={option.extra}\n                  addOption={addOption}\n                  removeOptionFromItem={removeOptionFromItem}\n                />\n              ))}\n            </Dish>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/category-list.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/my-restaurants.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/add-restaurants.tsx",["181","182"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"../../components/button\";\nimport { FormError } from \"../../components/form-error\";\nimport {\n  createRestaurants,\n  createRestaurantsVariables,\n} from \"../../__generated__/createRestaurants\";\nimport { MY_RESTAURANTS_QUERY } from \"./my-restaurants\";\n\nconst CREATE_RESTAURANT_MUTATION = gql`\n  mutation createRestaurants($input: CreateRestaurantInput!) {\n    createRestaurants(input: $input) {\n      ok\n      error\n      restaurantId\n    }\n  }\n`;\n\ninterface IFormProps {\n  name: string;\n  address: string;\n  categoryName: string;\n  file: FileList;\n}\n\nexport const AddRestaurant = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const onCompleted = (data: createRestaurants) => {\n    const {\n      createRestaurants: { ok, restaurantId, error },\n    } = data;\n    if (ok) {\n      const { file, name, categoryName, address } = getValues();\n      setUploading(false);\n      const queryResult = client.readQuery({ query: MY_RESTAURANTS_QUERY });\n      //fake cache -> It doesnt touch the API\n      client.writeQuery({\n        query: MY_RESTAURANTS_QUERY,\n        data: {\n          myRestaurants: {\n            ...queryResult.myRestaurants,\n            restaurants: [\n              {\n                address,\n                category: {\n                  __typename: \"CategoryEntity\",\n                  name: categoryName,\n                },\n                coverImg: imageUrl,\n                id: restaurantId,\n                isPromoted: false,\n                name,\n                __typename: \"RestaurantEntity\",\n              },\n              ...queryResult.myRestaurants.restaurants,\n            ],\n          },\n        },\n      });\n      history.push(\"/\");\n    }\n  };\n  const [createRestaurantMutation, { data }] = useMutation<\n    createRestaurants,\n    createRestaurantsVariables\n  >(CREATE_RESTAURANT_MUTATION, { onCompleted });\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    errors,\n  } = useForm<IFormProps>({ mode: \"onChange\" });\n  //useState\n  const [uploading, setUploading] = useState(false);\n  //onSubmit\n  const onSubmit = async () => {\n    try {\n      setUploading(true);\n      const { file, name, categoryName, address } = getValues();\n      const actualFile = file[0];\n      const formBody = new FormData();\n      formBody.append(\"file\", actualFile);\n      console.log(name, address);\n      //request\n      const { url: coverImg } = await (\n        await fetch(\"http://localhost:4000/uploads/\", {\n          method: \"POST\",\n          body: formBody,\n        })\n      ).json();\n      setImageUrl(coverImg);\n      createRestaurantMutation({\n        variables: {\n          input: {\n            name,\n            categoryName,\n            address,\n            coverImg,\n          },\n        },\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    //   input nameはpropsのfield名と一緒にする事\n    <div className=\"commonContainer w-full max-w-screen-sm flex flex-col items-center px-5\">\n      <Helmet>\n        <title> Create Restaurant | Higawari Eats</title>\n      </Helmet>\n      <h4 className=\"font-semibold text-2xl mb-3\">レストラン作成</h4>\n      <form\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"grid gap-3 mt-5 w-full mb-4\"\n      >\n        <input\n          className=\"inputCss\"\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"商名\"\n          ref={register({ required: \"入力が必要です。\", minLength: 4 })}\n        />\n        {errors.name?.type === \"minLength\" && (\n          <FormError errorMessage={\"4文字以上入力してください。\"} />\n        )}\n        <input\n          className=\"inputCss\"\n          type=\"text\"\n          name=\"address\"\n          placeholder=\"住所\"\n          ref={register({ required: \"入力が必要です。\" })}\n        />\n        <input\n          className=\"inputCss\"\n          type=\"text\"\n          name=\"categoryName\"\n          placeholder=\"カテゴリー名\"\n          ref={register({ required: \"入力が必要です。\" })}\n        />\n        <input\n          type=\"file\"\n          name=\"file\"\n          accept=\"image/*\"\n          ref={register({ required: true })}\n        />\n        <Button\n          loading={uploading}\n          canClick={formState.isValid}\n          actionText=\"作成\"\n        />\n        {data?.createRestaurants?.error && (\n          <FormError errorMessage={data.createRestaurants.error} />\n        )}\n      </form>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/my-restaurant.tsx",["183","184","185","186"],"import { gql, useQuery, useSubscription } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Dish } from \"../../components/dish\";\nimport {\n  ALL_ORDER_FRAGMENT,\n  MENU_FRAGMENT,\n  ORDERS_FRAGMENT,\n  RESTAURANT_FRAGMENT,\n} from \"../../fragments\";\nimport {\n  myRestaurant,\n  myRestaurantVariables,\n} from \"../../__generated__/myRestaurant\";\nimport {\n  VictoryAxis,\n  VictoryBar,\n  VictoryChart,\n  VictoryLabel,\n  VictoryLine,\n  VictoryPie,\n  VictoryTheme,\n  VictoryTooltip,\n  VictoryVoronoiContainer,\n} from \"victory\";\nimport { pendingOrders } from \"../../__generated__/pendingOrders\";\n\nexport const MY_RESTAURANT_QUERY = gql`\n  query myRestaurant($input: MyRestaurantInput!) {\n    myRestaurant(input: $input) {\n      error\n      ok\n      restaurant {\n        ...RestaurantParts\n        menu {\n          ...MenuParts\n        }\n        orders {\n          ...OrderParts\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${MENU_FRAGMENT}\n  ${ORDERS_FRAGMENT}\n`;\n\nconst PENDING_ORDERS_SUBSCRIPTION = gql`\n  subscription pendingOrders {\n    pendingOrders {\n      ...AllOrderParts\n    }\n  }\n  ${ALL_ORDER_FRAGMENT}\n`;\n\ninterface IParams {\n  id: string;\n}\n\nexport const MyRestaurant = () => {\n  const { id } = useParams<IParams>();\n  const { data, error } = useQuery<myRestaurant, myRestaurantVariables>(\n    MY_RESTAURANT_QUERY,\n    {\n      variables: {\n        input: {\n          id: parseInt(id),\n        },\n      },\n    }\n  );\n  console.log(data);\n  const { data: subscriptionData } = useSubscription<pendingOrders>(\n    PENDING_ORDERS_SUBSCRIPTION\n  );\n  const history = useHistory();\n  useEffect(() => {\n    if (subscriptionData?.pendingOrders.id) {\n      history.push(`/orders/${subscriptionData.pendingOrders.id}`);\n    }\n    //subscriptionDataが変更されるたびにuseEffectが再実行される\n  }, [subscriptionData]);\n  return (\n    <div>\n      <Helmet>\n        <title>\n          {data?.myRestaurant.restaurant?.name || \"Loading...\"} | Nuber Eats\n        </title>\n      </Helmet>\n      <div\n        className=\"bg-gray-400 py-28 bg-center bg-cover\"\n        style={{\n          backgroundImage: `url(${data?.myRestaurant.restaurant?.coverImg})`,\n        }}\n      ></div>\n      <div className=\"commonContainer mt-10\">\n        <h2 className=\"text-4xl font-medium mb-10\">\n          {data?.myRestaurant.restaurant?.name || \"Loading...\"}\n        </h2>\n        <Link\n          to={`/restaurant/${id}/add-menu`}\n          className=\"mr-8 text-white bg-gray-800 py-3 px-10\"\n        >\n          メニューを追加 &rarr;\n        </Link>\n        <Link to={\"\"} className=\"text-white bg-yellow-500 py-3 px-10\">\n          プロモション購入 &rarr;\n        </Link>\n        <div className=\"mt-10\">\n          {data?.myRestaurant.restaurant?.menu.length === 0 ? (\n            <h4 className=\"text-xl mb-5\">メニューがありません</h4>\n          ) : (\n            <div className=\"md:grid grid-cols-3 gap-x-7 gap-y-10 mt-8\">\n              {data?.myRestaurant.restaurant?.menu.map((menu) => (\n                <Dish\n                  name={menu.name}\n                  description={menu.description}\n                  price={menu.price}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n        {/*  */}\n        <div className=\"mt-20 mb-10\">\n          <h4 className=\"text-center text-2xl font-medium\">売上レポート</h4>\n          <div className=\"mt-10\">\n            <VictoryChart\n              theme={VictoryTheme.material}\n              height={500}\n              width={window.innerWidth - 100}\n              domainPadding={30}\n              containerComponent={<VictoryVoronoiContainer />}\n            >\n              <VictoryLine\n                interpolation=\"linear\"\n                labels={({ datum }) => `${datum.y}円`}\n                labelComponent={\n                  <VictoryTooltip\n                    flyoutPadding={20}\n                    renderInPortal\n                    style={\n                      {\n                        fontSize: 20,\n                        fill: \"#ff9f43\",\n                      } as any\n                    }\n                  />\n                }\n                style={{\n                  data: {\n                    strokeWidth: 5,\n                  },\n                }}\n                data={data?.myRestaurant.restaurant?.orders.map((order) => ({\n                  x: order.createdAt,\n                  y: order.total,\n                }))}\n              />\n              <VictoryAxis\n                tickLabelComponent={<VictoryLabel renderInPortal />}\n                style={{\n                  tickLabels: { fontSize: 20, fill: \"#ff9f43\" } as any,\n                }}\n                dependentAxis\n                offsetX={80}\n                tickFormat={(money) => `${money / 1000}千円`}\n              />\n              <VictoryAxis\n                style={{\n                  tickLabels: { fontSize: 20 } as any,\n                }}\n                tickFormat={(date) => new Date(date).toLocaleDateString(\"jp\")}\n              />\n            </VictoryChart>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/add-menu.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/dish.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/dish-option.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/order.tsx",["187"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useParams } from \"react-router\";\nimport { ALL_ORDER_FRAGMENT } from \"../fragments\";\nimport { useMe } from \"../hooks/useMe\";\nimport { editOrder, editOrderVariables } from \"../__generated__/editOrder\";\nimport { getOrder, getOrderVariables } from \"../__generated__/getOrder\";\nimport { OrderStatus, UserRole } from \"../__generated__/globalTypes\";\nimport { orderUpdates } from \"../__generated__/orderUpdates\";\n\nconst ORDER_SUB = gql`\n  subscription orderUpdates($input: OrderUpdateInput!) {\n    orderUpdates(input: $input) {\n      ...AllOrderParts\n    }\n  }\n  ${ALL_ORDER_FRAGMENT}\n`;\n\ninterface IParams {\n  id: string;\n}\n\nconst GET_ORDERS = gql`\n  query getOrder($input: GetOrderInput!) {\n    getOrder(input: $input) {\n      ok\n      error\n      order {\n        ...AllOrderParts\n      }\n    }\n  }\n  ${ALL_ORDER_FRAGMENT}\n`;\n\nconst EDIT_ORDER = gql`\n  mutation editOrder($input: EditOrderInput!) {\n    editOrder(input: $input) {\n      error\n      ok\n    }\n  }\n`;\nexport const Order = () => {\n  const params = useParams<IParams>();\n  const { data: userData } = useMe();\n  const [editOrderMutation] = useMutation<editOrder, editOrderVariables>(\n    EDIT_ORDER\n  );\n  const { data, subscribeToMore } = useQuery<getOrder, getOrderVariables>(\n    GET_ORDERS,\n    {\n      variables: {\n        input: {\n          id: +params.id,\n        },\n      },\n    }\n  );\n  //\n  useEffect(() => {\n    if (data?.getOrder.ok) {\n      subscribeToMore({\n        document: ORDER_SUB,\n        variables: {\n          input: {\n            id: +params.id,\n          },\n        },\n        updateQuery: (\n          prev,\n          //objectArgumentにtypeを与える方法\n          {\n            subscriptionData: { data },\n          }: { subscriptionData: { data: orderUpdates } }\n        ) => {\n          if (!data) return prev;\n          //以前のクエリと同じ構造のクエリを返さなきゃならない\n          return {\n            getOrder: {\n              ...prev.getOrder,\n              order: {\n                ...data.orderUpdates,\n              },\n            },\n          };\n        },\n      });\n    }\n  }, [data]);\n  //\n  const onButtonClick = (newStatus: OrderStatus) => {\n    editOrderMutation({\n      variables: {\n        input: {\n          id: +params.id,\n          status: newStatus,\n        },\n      },\n    });\n  };\n  console.log(data);\n  return (\n    <div className=\"commonContainer justify-center flex\">\n      <Helmet>\n        <title>注文 {params.id}| HigawariEats</title>\n      </Helmet>\n      <div className=\"border-2 border-gray-500 w-full max-w-screen-sm justify-center flex flex-col\">\n        <h4 className=\"w-full py-5 bg-gray-800 text-white text-center text-lg\">\n          注文番号 #{params.id}\n        </h4>\n        <h5 className=\"p-5 pt-10 text-3xl text-center\">\n          {data?.getOrder.order?.total}\n        </h5>\n        <div className=\"grid gap-6 text-xl p-5\">\n          <div className=\"border-t pt-5 border-gray-600\">\n            Prepared By:{\" \"}\n            <span className=\"font-medium\">\n              {data?.getOrder.order?.restaurant?.name}\n            </span>\n          </div>\n          <div className=\"border-t pt-5 border-gray-600\">\n            Deliver to:{\" \"}\n            <span className=\"font-medium\">\n              {data?.getOrder.order?.customer?.email}\n            </span>\n          </div>\n\n          <div className=\"border-t pt-5 border-gray-600\">\n            Driver:{\" \"}\n            <span className=\"font-medium\">\n              {data?.getOrder.order?.driver?.email || \"Not yet\"}\n            </span>\n          </div>\n        </div>\n        {userData?.me.role === \"Client\" && (\n          <span className=\"text-center mt-5 mb-3 text-2xl text-yellow-500\">\n            Status:{data?.getOrder.order?.status}\n          </span>\n        )}\n        {userData?.me.role === UserRole.Owner && (\n          <>\n            {data?.getOrder.order?.status === OrderStatus.PENDING && (\n              <button\n                onClick={() => onButtonClick(OrderStatus.COOKING)}\n                className=\"btn\"\n              >\n                Accept Order\n              </button>\n            )}\n            {data?.getOrder.order?.status === OrderStatus.COOKING && (\n              <button\n                onClick={() => onButtonClick(OrderStatus.COOKED)}\n                className=\"btn\"\n              >\n                Order Cooked\n              </button>\n            )}\n            {data?.getOrder.order?.status !== OrderStatus.COOKING &&\n              data?.getOrder.order?.status !== OrderStatus.PENDING && (\n                <span className=\"text-center mt-5 mb-3 text-2xl text-yellow-500\">\n                  Status:{data?.getOrder.order?.status}\n                </span>\n              )}\n          </>\n        )}\n        {userData?.me.role === UserRole.Delivery && (\n          <>\n            {data?.getOrder.order?.status === OrderStatus.COOKED && (\n              <button\n                onClick={() => onButtonClick(OrderStatus.PICKEDUP)}\n                className=\"btn\"\n              >\n                Picked Up\n              </button>\n            )}\n            {data?.getOrder.order?.status === OrderStatus.PICKEDUP && (\n              <button\n                onClick={() => onButtonClick(OrderStatus.DELIVERED)}\n                className=\"btn\"\n              >\n                Order Delivered\n              </button>\n            )}\n          </>\n        )}\n        {data?.getOrder.order?.status === OrderStatus.DELIVERED && (\n          <span className=\"text-center mt-5 mb-3 text-2xl text-yellow-500\">\n            Thanks\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/driver/dashboard.tsx",["188"],"import { gql, useMutation, useSubscription } from \"@apollo/client\";\nimport GoogleMapReact from \"google-map-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { ALL_ORDER_FRAGMENT } from \"../../fragments\";\nimport { cookedOrders } from \"../../__generated__/cookedOrders\";\nimport { takeOrder, takeOrderVariables } from \"../../__generated__/takeOrder\";\n\nconst COOKED_ORDERS_SUBSCRIPTION = gql`\n  subscription cookedOrders {\n    cookedOrders {\n      ...AllOrderParts\n    }\n  }\n  ${ALL_ORDER_FRAGMENT}\n`;\n\nconst TAKE_ORDER_MUTATION = gql`\n  mutation takeOrder($input: TakeOrderInput!) {\n    takeOrder(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\ninterface ICoords {\n  lat: number;\n  lng: number;\n}\n\ninterface IDriverProps {\n  lat: number;\n  lng: number;\n  $hover?: any;\n}\nconst GOOGLEKEY = String(process.env.REACT_APP_GOOGLE_API_KEY);\nconst Driver: React.FC<IDriverProps> = () => <div className=\"text-lg\">🚘</div>;\n\nexport const DashBoard = () => {\n  const [driverCoords, setDriverCoords] = useState<ICoords>({ lat: 0, lng: 0 });\n  const [map, setMap] = useState<google.maps.Map>();\n  const [maps, setMaps] = useState<any>();\n  const onSuccess = (position: GeolocationPosition) => {\n    const {\n      coords: { latitude, longitude },\n    } = position;\n    setDriverCoords({ lat: latitude, lng: longitude });\n  };\n  const onError = (error: GeolocationPositionError) => {\n    console.log(error);\n  };\n  const onAPiLoaded = ({ map, maps }: { map: any; maps: any }) => {\n    map.panTo(new google.maps.LatLng(driverCoords.lat, driverCoords.lng));\n    setMap(map);\n    setMaps(maps);\n  };\n  useEffect(() => {\n    navigator.geolocation.watchPosition(onSuccess, onError, {\n      enableHighAccuracy: true,\n    });\n  }, []);\n  useEffect(() => {\n    if (map && maps) {\n      map.panTo(new google.maps.LatLng(driverCoords.lat, driverCoords.lng));\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode(\n        {\n          //   location: new google.maps.LatLng(driverCoords.lat, driverCoords.lng),\n          // address:cookedOrdersData?.cookedOrders.restaurant.\n        },\n        (results, status) => {\n          console.log(results);\n          console.log(status);\n        }\n      );\n    }\n  }, [driverCoords.lat, driverCoords.lng, map, maps]);\n  const makeRoute = () => {\n    const directionService = new google.maps.DirectionsService();\n    const directionRender = new google.maps.DirectionsRenderer({\n      polylineOptions: {\n        strokeColor: \"#ff9f43\",\n      },\n    });\n    if (map) {\n      directionRender.setMap(map);\n      directionService.route(\n        {\n          origin: {\n            location: new google.maps.LatLng(\n              driverCoords.lat,\n              driverCoords.lng\n            ),\n          },\n          destination: {\n            location: new google.maps.LatLng(\n              driverCoords.lat + 0.05,\n              driverCoords.lng + 0.05\n            ),\n          },\n          travelMode: google.maps.TravelMode.DRIVING,\n        },\n        (result, _) => {\n          directionRender.setDirections(result);\n        }\n      );\n    }\n  };\n\n  const { data: cookedOrdersData } = useSubscription<cookedOrders>(\n    COOKED_ORDERS_SUBSCRIPTION\n  );\n  useEffect(() => {\n    if (cookedOrdersData?.cookedOrders.id) {\n      makeRoute();\n    }\n  }, [cookedOrdersData]);\n\n  const history = useHistory();\n  const onCompleted = (data: takeOrder) => {\n    if (data.takeOrder.ok) {\n      history.push(`/orders/${cookedOrdersData?.cookedOrders.id}`);\n    }\n  };\n  const [takeOrderMutation] = useMutation<takeOrder, takeOrderVariables>(\n    TAKE_ORDER_MUTATION,\n    {\n        onCompleted,\n    }\n  );\n  const triggerMutation = (orderId: number) => {\n    takeOrderMutation({\n      variables: {\n        input: {\n          id: orderId,\n        },\n      },\n    });\n  };\n  return (\n    <div>\n      <div\n        style={{ width: window.innerWidth, height: \"50vh\" }}\n        className=\"overflow-hidden\"\n      >\n        <GoogleMapReact\n          yesIWantToUseGoogleMapApiInternals\n          onGoogleApiLoaded={onAPiLoaded}\n          defaultZoom={16}\n          defaultCenter={{ lat: 35.7594578, lng: 139.67185949999998 }}\n          bootstrapURLKeys={{\n            key: GOOGLEKEY,\n          }}\n        >\n          <Driver lat={driverCoords.lat} lng={driverCoords.lng} />\n        </GoogleMapReact>\n      </div>\n      <div className=\"max-w-sm mx-auto bg-white relative -top-10 shadow-lg py-8  px-5\">\n        {cookedOrdersData?.cookedOrders.restaurant ? (\n          <>\n            <h1 className=\"text-center text-3xl font-medium\">新しいご注文</h1>\n            <h4 className=\"text-center my-3 text-2xl font-medium\">\n              ピックアップ! @ {cookedOrdersData?.cookedOrders.restaurant?.name}\n            </h4>\n            <button className=\"btn w-full mt-5\" onClick={makeRoute}>\n              ルートを見る\n            </button>\n            <button\n              className=\"btn w-full mt-5\"\n              onClick={() => triggerMutation(cookedOrdersData.cookedOrders.id)}\n            >\n              test\n            </button>\n            <Link\n              to={`/orders/${cookedOrdersData?.cookedOrders.id}`}\n              className=\"btn w-full mt-5 block text-center\"\n            >\n              注文を受け取る &rarr;\n            </Link>\n          </>\n        ) : (\n          <h1 className=\"text-center text-3xl font-medium\">待機中...</h1>\n        )}\n      </div>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts",[],{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"189","replacedBy":"193"},{"ruleId":"191","replacedBy":"194"},{"ruleId":"189","replacedBy":"195"},{"ruleId":"191","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":77,"column":9,"nodeType":"199","endLine":77,"endColumn":58},{"ruleId":"200","severity":1,"message":"201","line":56,"column":16,"nodeType":"202","messageId":"203","endLine":56,"endColumn":21},{"ruleId":"189","replacedBy":"204"},{"ruleId":"191","replacedBy":"205"},{"ruleId":"200","severity":1,"message":"206","line":4,"column":22,"nodeType":"202","messageId":"203","endLine":4,"endColumn":33},{"ruleId":"200","severity":1,"message":"201","line":26,"column":22,"nodeType":"202","messageId":"203","endLine":26,"endColumn":27},{"ruleId":"200","severity":1,"message":"207","line":56,"column":12,"nodeType":"202","messageId":"203","endLine":56,"endColumn":13},{"ruleId":"208","severity":1,"message":"209","line":64,"column":6,"nodeType":"210","endLine":64,"endColumn":8,"suggestions":"211"},{"ruleId":"200","severity":1,"message":"212","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":13},{"ruleId":"200","severity":1,"message":"213","line":79,"column":28,"nodeType":"202","messageId":"203","endLine":79,"endColumn":32},{"ruleId":"200","severity":1,"message":"201","line":79,"column":43,"nodeType":"202","messageId":"203","endLine":79,"endColumn":48},{"ruleId":"200","severity":1,"message":"207","line":36,"column":12,"nodeType":"202","messageId":"203","endLine":36,"endColumn":13},{"ruleId":"208","severity":1,"message":"214","line":49,"column":6,"nodeType":"210","endLine":49,"endColumn":32,"suggestions":"215"},{"ruleId":"189","replacedBy":"216"},{"ruleId":"191","replacedBy":"217"},{"ruleId":"189","replacedBy":"218"},{"ruleId":"191","replacedBy":"219"},{"ruleId":"189","replacedBy":"220"},{"ruleId":"191","replacedBy":"221"},{"ruleId":"200","severity":1,"message":"222","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":19},{"ruleId":"200","severity":1,"message":"206","line":3,"column":10,"nodeType":"202","messageId":"203","endLine":3,"endColumn":21},{"ruleId":"189","replacedBy":"223"},{"ruleId":"191","replacedBy":"224"},{"ruleId":"200","severity":1,"message":"225","line":51,"column":17,"nodeType":"202","messageId":"203","endLine":51,"endColumn":24},{"ruleId":"200","severity":1,"message":"226","line":173,"column":13,"nodeType":"202","messageId":"203","endLine":173,"endColumn":25},{"ruleId":"200","severity":1,"message":"227","line":173,"column":36,"nodeType":"202","messageId":"203","endLine":173,"endColumn":48},{"ruleId":"200","severity":1,"message":"201","line":37,"column":46,"nodeType":"202","messageId":"203","endLine":37,"endColumn":51},{"ruleId":"200","severity":1,"message":"228","line":40,"column":15,"nodeType":"202","messageId":"203","endLine":40,"endColumn":19},{"ruleId":"200","severity":1,"message":"229","line":18,"column":3,"nodeType":"202","messageId":"203","endLine":18,"endColumn":13},{"ruleId":"200","severity":1,"message":"230","line":22,"column":3,"nodeType":"202","messageId":"203","endLine":22,"endColumn":13},{"ruleId":"200","severity":1,"message":"201","line":65,"column":17,"nodeType":"202","messageId":"203","endLine":65,"endColumn":22},{"ruleId":"208","severity":1,"message":"231","line":85,"column":6,"nodeType":"210","endLine":85,"endColumn":24,"suggestions":"232"},{"ruleId":"208","severity":1,"message":"233","line":92,"column":6,"nodeType":"210","endLine":92,"endColumn":12,"suggestions":"234"},{"ruleId":"208","severity":1,"message":"235","line":118,"column":6,"nodeType":"210","endLine":118,"endColumn":24,"suggestions":"236"},"no-native-reassign",["237"],"no-negated-in-lhs",["238"],["237"],["238"],["237"],["238"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar",["237"],["238"],"'useLocation' is defined but never used.","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verifyTrg'. Either include it or remove the dependency array.","ArrayExpression",["239"],"'React' is defined but never used.","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'queryReady'. Either include it or remove the dependency array.",["240"],["237"],["238"],["237"],["238"],["237"],["238"],"'useEffect' is defined but never used.",["237"],["238"],"'loading' is assigned a value but never used.","'mutationData' is assigned a value but never used.","'placingOrder' is assigned a value but never used.","'file' is assigned a value but never used.","'VictoryBar' is defined but never used.","'VictoryPie' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["241"],"React Hook useEffect has missing dependencies: 'params.id' and 'subscribeToMore'. Either include them or remove the dependency array.",["242"],"React Hook useEffect has a missing dependency: 'makeRoute'. Either include it or remove the dependency array.",["243"],"no-global-assign","no-unsafe-negation",{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},"Update the dependencies array to be: [verifyTrg]",{"range":"254","text":"255"},"Update the dependencies array to be: [history, location.search, queryReady]",{"range":"256","text":"257"},"Update the dependencies array to be: [history, subscriptionData]",{"range":"258","text":"259"},"Update the dependencies array to be: [data, params.id, subscribeToMore]",{"range":"260","text":"261"},"Update the dependencies array to be: [cookedOrdersData, makeRoute]",{"range":"262","text":"263"},[1634,1636],"[verifyTrg]",[1269,1295],"[history, location.search, queryReady]",[1911,1929],"[history, subscriptionData]",[2184,2190],"[data, params.id, subscribeToMore]",[3350,3368],"[cookedOrdersData, makeRoute]"]