[{"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx":"1","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts":"2","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx":"3","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts":"4","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx":"5","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx":"6","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx":"7","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx":"8","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx":"9","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx":"10","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts":"11","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx":"12","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx":"13"},{"size":588,"mtime":1611482864802,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1611383438987,"results":"16","hashOfConfig":"15"},{"size":584,"mtime":1611623515161,"results":"17","hashOfConfig":"15"},{"size":1041,"mtime":1611576566412,"results":"18","hashOfConfig":"15"},{"size":1187,"mtime":1611625078817,"results":"19","hashOfConfig":"15"},{"size":4363,"mtime":1611573949145,"results":"20","hashOfConfig":"15"},{"size":619,"mtime":1611415477967,"results":"21","hashOfConfig":"15"},{"size":4836,"mtime":1611579055580,"results":"22","hashOfConfig":"15"},{"size":241,"mtime":1611550490314,"results":"23","hashOfConfig":"15"},{"size":506,"mtime":1611546035583,"results":"24","hashOfConfig":"15"},{"size":706,"mtime":1611574596542,"results":"25","hashOfConfig":"15"},{"size":586,"mtime":1611624026575,"results":"26","hashOfConfig":"15"},{"size":83,"mtime":1611623226632,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1o4rm3h",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx",[],["59","60"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts",[],["61","62"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx",["63"],"import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport { isLoggedInVar } from \"../apollo\";\nimport { Restaurants } from \"../pages/client/restaurants\";\nimport { meQuery } from \"../__generated__/meQuery\";\n\n//switchはchildとしてrouteしか持つ事ができない、だがClientRoutesはfragment <></>をreturnするからエラーになる。\n//直し方は簡単arrayし変える。\nconst ClientRoutes = [\n  <Route path=\"/\" exact>\n    <Restaurants />\n  </Route>,\n];\n\nconst ME_QUERY = gql`\n  query meQuery {\n    me {\n      id\n      email\n      role\n      verified\n    }\n  }\n`;\n\nconst LoggedInRouter = () => {\n  const { data, loading, error } = useQuery<meQuery>(ME_QUERY);\n  if (loading || error || !data) {\n    return (\n      <div className=\"h-screen flex justify-center items-center\">\n        <span className=\"font-medium text-2xl\">Loading...</span>\n      </div>\n    );\n  }\n  return (\n    <Router>\n      <Switch>\n        {data.me.role === \"Client\" && ClientRoutes}\n        <Redirect to=\"/\" />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default LoggedInRouter;\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx",["64"],"import { Helmet } from \"react-helmet-async\";\nimport higawariLogo from \"../images/logo.svg\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport {\n  LoginMutation,\n  LoginMutationVariables,\n} from \"../__generated__/LoginMutation\";\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\nimport { authToken, isLoggedInVar } from \"../apollo\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\n\ninterface ILoginForm {\n  email: string;\n  password: string;\n}\n\nconst LOGIN_MUTAITION = gql`\n  mutation LoginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      error\n      ok\n      token\n    }\n  }\n`;\n\nconst Login = () => {\n  console.log(isLoggedInVar());\n  const {\n    register,\n    getValues,\n    handleSubmit,\n    errors,\n    formState,\n  } = useForm<ILoginForm>({\n    mode: \"onChange\",\n  });\n  const onCompleted = (data: LoginMutation) => {\n    const {\n      login: { ok, token },\n    } = data;\n    if (ok && token) {\n      console.log(token);\n      localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n      authToken(token);\n      isLoggedInVar(true);\n    }\n  };\n  //useMutationの１番目のargsはmutation function, triggerの役割を果たす。\n  //useMutationの2番目のargsはobject, {error, loading, data}\n  const [loginTrg, { data: loginMutationResult, loading }] = useMutation<\n    LoginMutation,\n    LoginMutationVariables\n  >(LOGIN_MUTAITION, { onCompleted });\n  const onSubmit = () => {\n    if (!loading) {\n      const { email, password } = getValues();\n      loginTrg({\n        variables: {\n          loginInput: {\n            email,\n            password,\n          },\n        },\n      });\n    }\n  };\n  return (\n    <div className=\"h-screen flex flex-col items-center mt-5 lg:mt-28\">\n      <Helmet>\n        <title>Higawari Eats | Login</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center px-5\">\n        <img src={higawariLogo} className=\" w-72 mb-5\" />\n        <h4 className=\"w-full text-left font-medium text-2xl mb-5\">\n          ご利用いただきありがとうございます\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-4\"\n        >\n          <input\n            ref={register({\n              required: \"メールを入力して下さい。\",\n              pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            })}\n            required\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"メール\"\n            className=\"inputCss\"\n          />\n          {errors.email?.type === \"pattern\" && (\n            <FormError\n              errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n            />\n          )}\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          <input\n            ref={register({\n              required: \"パスワードを入力して下さい。\",\n              minLength: 4,\n            })}\n            required\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"パスワード\"\n            className=\"inputCss\"\n          />\n          {errors.password?.type === \"minLength\" && (\n            <FormError\n              errorMessage={\"パスワードを10文字以上入力して下さい。\"}\n            />\n          )}\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText=\"LogIn\"\n          />\n          {loginMutationResult?.login.error && (\n            <FormError errorMessage={loginMutationResult.login.error} />\n          )}\n        </form>\n        <div>\n          Higawariのご利用は初めてですか?{\" \"}\n          <Link\n            to=\"create-account\"\n            className=\"text-yellow-600 text-opacity-75 hover:underline\"\n          >\n            アカウントを作成\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx",[],["65","66"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx",["67"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"68","replacedBy":"72"},{"ruleId":"70","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":9,"column":10,"nodeType":"76","messageId":"77","endLine":9,"endColumn":23},{"ruleId":"78","severity":1,"message":"79","line":78,"column":9,"nodeType":"80","endLine":78,"endColumn":58},{"ruleId":"68","replacedBy":"81"},{"ruleId":"70","replacedBy":"82"},{"ruleId":"74","severity":1,"message":"83","line":56,"column":16,"nodeType":"76","messageId":"77","endLine":56,"endColumn":21},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],["84"],["85"],"@typescript-eslint/no-unused-vars","'isLoggedInVar' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["84"],["85"],"'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]