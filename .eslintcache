[{"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx":"1","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts":"2","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx":"3","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts":"4","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx":"5","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx":"6","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx":"7","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx":"8","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx":"9","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx":"10","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx":"11","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx":"12","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/header.tsx":"13","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/confirm-email.tsx":"14","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/hooks/useMe.tsx":"15","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/edit-profile.tsx":"16","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts":"17","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/restaurant.tsx":"18"},{"size":588,"mtime":1611482864802,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1611383438987,"results":"21","hashOfConfig":"20"},{"size":584,"mtime":1611623515161,"results":"22","hashOfConfig":"23"},{"size":1041,"mtime":1611576566412,"results":"24","hashOfConfig":"20"},{"size":1395,"mtime":1611664447298,"results":"25","hashOfConfig":"23"},{"size":4311,"mtime":1613479691338,"results":"26","hashOfConfig":"20"},{"size":619,"mtime":1611415477967,"results":"27","hashOfConfig":"23"},{"size":4836,"mtime":1613023594197,"results":"28","hashOfConfig":"20"},{"size":239,"mtime":1611672055964,"results":"29","hashOfConfig":"20"},{"size":506,"mtime":1611666849342,"results":"30","hashOfConfig":"20"},{"size":690,"mtime":1613023633564,"results":"31","hashOfConfig":"20"},{"size":2701,"mtime":1613582332347,"results":"32","hashOfConfig":"20"},{"size":1571,"mtime":1611667064143,"results":"33","hashOfConfig":"20"},{"size":2161,"mtime":1613023676199,"results":"34","hashOfConfig":"20"},{"size":311,"mtime":1611630339155,"results":"35","hashOfConfig":"20"},{"size":3676,"mtime":1613023712379,"results":"36","hashOfConfig":"20"},{"size":916,"mtime":1613581072106,"results":"37","hashOfConfig":"20"},{"size":586,"mtime":1613582302912,"results":"38","hashOfConfig":"20"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1uta326",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o4rm3h",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx",[],["84","85"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts",[],["86","87"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts",[],["88","89"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx",["90"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx",["91"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx",[],["92","93"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx",["94"],"import { Helmet } from \"react-helmet-async\";\nimport higawariLogo from \"../images/logo.svg\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport { Button } from \"../components/button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserRole } from \"../__generated__/globalTypes\";\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from \"../__generated__/createAccountMutation\";\n\ninterface CreateAccountForm {\n  email: string;\n  password: string;\n  role: UserRole;\n}\n\nconst CREATE_ACCOUNT_MUTAITION = gql`\n  mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      error\n      ok\n    }\n  }\n`;\n\nconst CreateAccount = () => {\n  const {\n    register,\n    getValues,\n    handleSubmit,\n    errors,\n    formState,\n  } = useForm<CreateAccountForm>({\n    mode: \"onChange\",\n    defaultValues: {\n      role: UserRole.Client,\n    },\n  });\n  const history = useHistory();\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok },\n    } = data;\n    if (ok) {\n      history.push(\"/\");\n    }\n  };\n  //useMutationの１番目のargsはmutation function, triggerの役割を果たす。\n  //useMutationの2番目のargsはobject, {error, loading, data}\n  const [\n    createAccountMutation,\n    { loading, error, data: createAccountResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREATE_ACCOUNT_MUTAITION,\n    { onCompleted }\n  );\n  const onSubmit = () => {\n    const { email, password, role } = getValues();\n    if (!loading) {\n      createAccountMutation({\n        variables: {\n          createAccountInput: {\n            email,\n            password,\n            role,\n          },\n        },\n      });\n    }\n  };\n  return (\n    <div className=\"h-screen flex flex-col items-center mt-5 lg:mt-28\">\n      <Helmet>\n        <title>Create Account | Higawari Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center px-5\">\n        <img\n          src={higawariLogo}\n          className=\" w-72 mb-5\"\n          alt=\"Higawari-eats-logo\"\n        />\n        <h4 className=\"w-full text-left font-medium text-2xl mb-5\">\n          さあ始めましょう\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-4\"\n        >\n          <input\n            ref={register({\n              required: \"メールを入力して下さい。\",\n              pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            })}\n            required\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"メール\"\n            className=\"inputCss\"\n          />\n          {errors.email?.type === \"pattern\" && (\n            <FormError\n              errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n            />\n          )}\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          <input\n            ref={register({\n              required: \"パスワードを入力して下さい。\",\n              minLength: 4,\n            })}\n            required\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"パスワード\"\n            className=\"inputCss\"\n          />\n          {errors.password?.type === \"minLength\" && (\n            <FormError\n              errorMessage={\"パスワードを10文字以上入力して下さい。\"}\n            />\n          )}\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          <select\n            className=\"inputCss\"\n            name=\"role\"\n            ref={register({\n              required: true,\n            })}\n          >\n            {Object.keys(UserRole).map((role, index) => (\n              <option key={index}>{role}</option>\n            ))}\n          </select>\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText=\"生成\"\n          />\n          {createAccountResult?.createAccount.error && (\n            <FormError errorMessage={createAccountResult.createAccount.error} />\n          )}\n        </form>\n        <div>\n          既にアカウントをお持ちでしょうか?{\" \"}\n          <Link\n            to=\"/\"\n            className=\"text-yellow-600 text-opacity-75 hover:underline\"\n          >\n            ログイン\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateAccount;\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx",["95"],"import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { Restaurant } from \"../../components/restaurant\";\nimport {\n  restaurantPageQuery,\n  restaurantPageQueryVariables,\n} from \"../../__generated__/restaurantPageQuery\";\n\n//restaurants :{results:{isPromoted}}抜けてる状態\nconst RESTAURANT_QUERY = gql`\n  query restaurantPageQuery($input: RestaurantsInput!) {\n    allCategories {\n      ok\n      error\n      categories {\n        id\n        name\n        coverImg\n        slug\n        restaurantCount\n      }\n    }\n    restaurants(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      results {\n        id\n        name\n        coverImg\n        category {\n          name\n        }\n        address\n      }\n    }\n  }\n`;\n\nexport const Restaurants = () => {\n  const { data, loading, error } = useQuery<\n    restaurantPageQuery,\n    restaurantPageQueryVariables\n  >(RESTAURANT_QUERY, {\n    variables: {\n      input: {\n        page: 1,\n      },\n    },\n  });\n  return (\n    <div>\n      <form\n        style={{\n          backgroundImage: `url(https://www.kogakuin.ac.jp/campus/fbb28u0000005ate-img/fbb28u0000005ats.jpg)`,\n        }}\n        className=\"w-full py-40 flex items-center justify-center bg-cover bg-center mx-auto max-w-screen-2xl\"\n      >\n        <input\n          className=\"inputCss w-3/4 border-0 items-center justify-center md:w-3/12\"\n          type=\"Search\"\n          placeholder=\"探してるレストランは？\"\n        />\n      </form>\n      {!loading && (\n        <div className=\"mt-8 mx-auto max-w-screen-2xl\">\n          {/* //category component */}\n          <div className=\"flex justify-around max-w-xs mx-auto\">\n            {data?.allCategories.categories?.map((category) => (\n              <div className=\"flex flex-col items-center cursor-pointer group\">\n                <div\n                  className=\"w-14 h-14 rounded-full bg-yellow-500 bg-cover \"\n                  style={{ backgroundImage: `url(${category.coverImg})` }}\n                ></div>\n                <span className=\"mt-3 text-sm text-center font-medium group-hover:bg-gray-200 rounded-lg\">\n                  {category.name}\n                </span>\n              </div>\n            ))}\n          </div>\n          {/* // */}\n          <div className=\"grid grid-cols-3 gap-x-7 gap-y-10 mt-8\">\n            {data?.restaurants.results?.map((restaurant) => (\n              <Restaurant\n                id={restaurant.id.toString()}\n                coverImg={restaurant.coverImg}\n                name={restaurant.name}\n                categoryName={restaurant.category?.name}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/header.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/confirm-email.tsx",["96","97","98","99"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/hooks/useMe.tsx",["100"],"import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { meQuery } from \"../__generated__/meQuery\";\n\n\nconst ME_QUERY = gql`\n  query meQuery {\n    me {\n      id\n      email\n      role\n      verified\n    }\n  }\n`;\n\nexport const useMe = () => {\n    return useQuery<meQuery>(ME_QUERY);\n};\n",["101","102"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/edit-profile.tsx",["103","104"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"../../components/button\";\nimport { FormError } from \"../../components/form-error\";\nimport { useMe } from \"../../hooks/useMe\";\nimport {\n  editProfile,\n  editProfileVariables,\n} from \"../../__generated__/editProfile\";\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfile($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\ninterface IFormProps {\n  email?: string;\n  password?: string;\n}\n\nexport const EditProfile = () => {\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    errors,\n  } = useForm<IFormProps>({\n    mode: \"onChange\",\n    defaultValues: {\n      email: userData?.me.email,\n    },\n  });\n  const onSubmit = () => {\n    const { email, password } = getValues();\n    editProfileTrg({\n      variables: {\n        input: {\n          email,\n          ...(password !== \"\" && { password }),\n        },\n      },\n    });\n  };\n  const onCompleted = (data: editProfile) => {\n    const {\n      editProfile: { ok },\n    } = data;\n    if (ok && userData) {\n      const {\n        me: { email: prevEmail, id },\n      } = userData;\n      const { email: newEmail } = getValues();\n      if (prevEmail !== newEmail) {\n        client.writeFragment({\n          id: `UserEntity:${id}`,\n          fragment: gql`\n            fragment EditedUser on UserEntity {\n              verified\n              email\n            }\n          `,\n          data: {\n            email: newEmail,\n            verified: false,\n          },\n        });\n      }\n    }\n  };\n  const [editProfileTrg, { data, loading, error }] = useMutation<\n    editProfile,\n    editProfileVariables\n  >(EDIT_PROFILE_MUTATION, {\n    onCompleted,\n  });\n  return (\n    <div className=\"flex flex-col h-screen mt-52 items-center px-5\">\n      <Helmet>\n        <title>Edit Profile | Higawari Eats</title>\n      </Helmet>\n      <h4 className=\"font-semibold text-2xl mb-3\">プロフィール</h4>\n      <form\n        className=\"grid gap-3 mt-5 w-full max-w-screen-sm mb-4\"\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <input\n          ref={register({\n            required: \"メールを入力して下さい。\",\n            pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          })}\n          required\n          name=\"email\"\n          placeholder=\"メール\"\n          type=\"email\"\n          className=\"inputCss\"\n        />\n        {errors.email?.type === \"pattern\" && (\n          <FormError\n            errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n          />\n        )}\n        {errors.email?.message && (\n          <FormError errorMessage={errors.email?.message} />\n        )}\n        <input\n          ref={register({\n            minLength: 8,\n          })}\n          name=\"password\"\n          placeholder=\"パスワード\"\n          type=\"password\"\n          className=\"inputCss\"\n        />\n        {errors.password?.type === \"minLength\" && (\n          <FormError errorMessage={\"パスワードを8文字以上入力して下さい。\"} />\n        )}\n        {errors.password?.message && (\n          <FormError errorMessage={errors.password?.message} />\n        )}\n        <Button\n          canClick={formState.isValid}\n          loading={loading}\n          actionText={\"更新\"}\n        />\n      </form>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/restaurant.tsx",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"105","replacedBy":"109"},{"ruleId":"107","replacedBy":"110"},{"ruleId":"105","replacedBy":"111"},{"ruleId":"107","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":4,"column":3,"nodeType":"115","messageId":"116","endLine":4,"endColumn":11},{"ruleId":"117","severity":1,"message":"118","line":77,"column":9,"nodeType":"119","endLine":77,"endColumn":58},{"ruleId":"105","replacedBy":"120"},{"ruleId":"107","replacedBy":"121"},{"ruleId":"113","severity":1,"message":"122","line":56,"column":16,"nodeType":"115","messageId":"116","endLine":56,"endColumn":21},{"ruleId":"113","severity":1,"message":"122","line":42,"column":26,"nodeType":"115","messageId":"116","endLine":42,"endColumn":31},{"ruleId":"113","severity":1,"message":"123","line":4,"column":22,"nodeType":"115","messageId":"116","endLine":4,"endColumn":33},{"ruleId":"113","severity":1,"message":"122","line":26,"column":22,"nodeType":"115","messageId":"116","endLine":26,"endColumn":27},{"ruleId":"113","severity":1,"message":"124","line":56,"column":12,"nodeType":"115","messageId":"116","endLine":56,"endColumn":13},{"ruleId":"125","severity":1,"message":"126","line":64,"column":6,"nodeType":"127","endLine":64,"endColumn":8,"suggestions":"128"},{"ruleId":"113","severity":1,"message":"129","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":13},{"ruleId":"105","replacedBy":"130"},{"ruleId":"107","replacedBy":"131"},{"ruleId":"113","severity":1,"message":"132","line":79,"column":28,"nodeType":"115","messageId":"116","endLine":79,"endColumn":32},{"ruleId":"113","severity":1,"message":"122","line":79,"column":43,"nodeType":"115","messageId":"116","endLine":79,"endColumn":48},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],["133"],["134"],["133"],["134"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["133"],["134"],"'error' is assigned a value but never used.","'useLocation' is defined but never used.","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verifyTrg'. Either include it or remove the dependency array.","ArrayExpression",["135"],"'React' is defined but never used.",["133"],["134"],"'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},"Update the dependencies array to be: [verifyTrg]",{"range":"138","text":"139"},[1634,1636],"[verifyTrg]"]