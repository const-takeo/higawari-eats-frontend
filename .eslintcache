[{"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx":"1","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts":"2","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx":"3","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts":"4","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx":"5","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx":"6","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx":"7","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx":"8","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx":"9","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx":"10","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx":"11","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx":"12","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/header.tsx":"13","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/confirm-email.tsx":"14","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/hooks/useMe.tsx":"15","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/edit-profile.tsx":"16","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/restaurant.tsx":"17","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/search.tsx":"18","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/constants.ts":"19","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/fragments.ts":"20","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/category.tsx":"21","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurant.tsx":"22","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/category-list.tsx":"23","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/my-restaurants.tsx":"24","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/add-restaurants.tsx":"25","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/my-restaurant.tsx":"26","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/add-menu.tsx":"27","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/dish.tsx":"28"},{"size":588,"mtime":1611482864802,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":1611383438987,"results":"31","hashOfConfig":"30"},{"size":584,"mtime":1611623515161,"results":"32","hashOfConfig":"30"},{"size":1041,"mtime":1611576566412,"results":"33","hashOfConfig":"30"},{"size":3317,"mtime":1614958869480,"results":"34","hashOfConfig":"30"},{"size":4311,"mtime":1613479691338,"results":"35","hashOfConfig":"30"},{"size":725,"mtime":1611573678115,"results":"36","hashOfConfig":"30"},{"size":4836,"mtime":1613711181835,"results":"37","hashOfConfig":"30"},{"size":239,"mtime":1611672055964,"results":"38","hashOfConfig":"30"},{"size":506,"mtime":1611666849342,"results":"39","hashOfConfig":"30"},{"size":690,"mtime":1613023633564,"results":"40","hashOfConfig":"30"},{"size":3888,"mtime":1613717834282,"results":"41","hashOfConfig":"30"},{"size":1707,"mtime":1613727095968,"results":"42","hashOfConfig":"30"},{"size":2161,"mtime":1613023676199,"results":"43","hashOfConfig":"30"},{"size":311,"mtime":1611630339155,"results":"44","hashOfConfig":"30"},{"size":3676,"mtime":1613023712379,"results":"45","hashOfConfig":"30"},{"size":702,"mtime":1613720132288,"results":"46","hashOfConfig":"30"},{"size":1533,"mtime":1613714291778,"results":"47","hashOfConfig":"30"},{"size":52,"mtime":1611571007862,"results":"48","hashOfConfig":"30"},{"size":740,"mtime":1615086070468,"results":"49","hashOfConfig":"30"},{"size":1104,"mtime":1613718127644,"results":"50","hashOfConfig":"30"},{"size":2010,"mtime":1615099870555,"results":"51","hashOfConfig":"30"},{"size":934,"mtime":1613715629549,"results":"52","hashOfConfig":"30"},{"size":1792,"mtime":1614943801946,"results":"53","hashOfConfig":"30"},{"size":4786,"mtime":1614950313796,"results":"54","hashOfConfig":"30"},{"size":4694,"mtime":1615099631165,"results":"55","hashOfConfig":"30"},{"size":5515,"mtime":1614957933396,"results":"56","hashOfConfig":"30"},{"size":1196,"mtime":1615104127149,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1uta326",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx",[],["130","131"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts",[],["132","133"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx",[],["134","135"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts",[],["136","137"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx",["138"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx",["139"],"import { Helmet } from \"react-helmet-async\";\nimport higawariLogo from \"../images/logo.svg\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport { Button } from \"../components/button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserRole } from \"../__generated__/globalTypes\";\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from \"../__generated__/createAccountMutation\";\n\ninterface CreateAccountForm {\n  email: string;\n  password: string;\n  role: UserRole;\n}\n\nconst CREATE_ACCOUNT_MUTAITION = gql`\n  mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      error\n      ok\n    }\n  }\n`;\n\nconst CreateAccount = () => {\n  const {\n    register,\n    getValues,\n    handleSubmit,\n    errors,\n    formState,\n  } = useForm<CreateAccountForm>({\n    mode: \"onChange\",\n    defaultValues: {\n      role: UserRole.Client,\n    },\n  });\n  const history = useHistory();\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok },\n    } = data;\n    if (ok) {\n      history.push(\"/\");\n    }\n  };\n  //useMutationの１番目のargsはmutation function, triggerの役割を果たす。\n  //useMutationの2番目のargsはobject, {error, loading, data}\n  const [\n    createAccountMutation,\n    { loading, error, data: createAccountResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREATE_ACCOUNT_MUTAITION,\n    { onCompleted }\n  );\n  const onSubmit = () => {\n    const { email, password, role } = getValues();\n    if (!loading) {\n      createAccountMutation({\n        variables: {\n          createAccountInput: {\n            email,\n            password,\n            role,\n          },\n        },\n      });\n    }\n  };\n  return (\n    <div className=\"h-screen flex flex-col items-center mt-5 lg:mt-28\">\n      <Helmet>\n        <title>Create Account | Higawari Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center px-5\">\n        <img\n          src={higawariLogo}\n          className=\" w-72 mb-5\"\n          alt=\"Higawari-eats-logo\"\n        />\n        <h4 className=\"w-full text-left font-medium text-2xl mb-5\">\n          さあ始めましょう\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-4\"\n        >\n          <input\n            ref={register({\n              required: \"メールを入力して下さい。\",\n              pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            })}\n            required\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"メール\"\n            className=\"inputCss\"\n          />\n          {errors.email?.type === \"pattern\" && (\n            <FormError\n              errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n            />\n          )}\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          <input\n            ref={register({\n              required: \"パスワードを入力して下さい。\",\n              minLength: 4,\n            })}\n            required\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"パスワード\"\n            className=\"inputCss\"\n          />\n          {errors.password?.type === \"minLength\" && (\n            <FormError\n              errorMessage={\"パスワードを10文字以上入力して下さい。\"}\n            />\n          )}\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          <select\n            className=\"inputCss\"\n            name=\"role\"\n            ref={register({\n              required: true,\n            })}\n          >\n            {Object.keys(UserRole).map((role, index) => (\n              <option key={index}>{role}</option>\n            ))}\n          </select>\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText=\"生成\"\n          />\n          {createAccountResult?.createAccount.error && (\n            <FormError errorMessage={createAccountResult.createAccount.error} />\n          )}\n        </form>\n        <div>\n          既にアカウントをお持ちでしょうか?{\" \"}\n          <Link\n            to=\"/\"\n            className=\"text-yellow-600 text-opacity-75 hover:underline\"\n          >\n            ログイン\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateAccount;\n",["140","141"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx",[],["142","143"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/header.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/confirm-email.tsx",["144","145","146","147"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useMe } from \"../../hooks/useMe\";\nimport {\n  verifyEmail,\n  verifyEmailVariables,\n} from \"../../__generated__/verifyEmail\";\n\nconst VERIFY_EMAIL_MUTATION = gql`\n  mutation verifyEmail($input: VerifyEmailInput!) {\n    verifyEmail(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\nexport const ConfirmEmail = () => {\n  const history = useHistory();\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n  const onCompleted = (data: verifyEmail) => {\n    const {\n      verifyEmail: { error, ok },\n    } = data;\n    if (ok && userData?.me.id) {\n      //cacheを直接じゃなくてrefetchしてアップデートする方法\n      // await refetch(); Promiseを返す、const { data: userData, refetch } = useMe();\n      //cacheを直接修正する方法\n      client.writeFragment({\n        id: `UserEntity:${userData.me.id}`,\n        fragment: gql`\n          fragment VerifiedUser on UserEntity {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      history.push(\"/\");\n    }\n  };\n  const [verifyTrg] = useMutation<verifyEmail, verifyEmailVariables>(\n    VERIFY_EMAIL_MUTATION,\n    {\n      onCompleted,\n    }\n  );\n  // hrefのコードを持ってくる１番目のoption\n  // const location = useLocation();\n  useEffect(() => {\n    // console.log(location.search);\n    const [_, code] = window.location.href.split(\"confirm?=\");\n    verifyTrg({\n      variables: {\n        input: {\n          code,\n        },\n      },\n    });\n  }, []);\n  return (\n    <div className=\"flex flex-col text-center h-screen mt-60\">\n      <Helmet>\n        <title>Verify Email | Higawari Eats</title>\n      </Helmet>\n      <h2 className=\"text-lg font-semibold mb-2\">\n        アカウントを認証しています。\n      </h2>\n      <h4 className=\"text-gray-700\">\n        少々お待ちください。このページから離れないでください。\n      </h4>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/hooks/useMe.tsx",["148"],"import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { meQuery } from \"../__generated__/meQuery\";\n\n\nconst ME_QUERY = gql`\n  query meQuery {\n    me {\n      id\n      email\n      role\n      verified\n    }\n  }\n`;\n\nexport const useMe = () => {\n    return useQuery<meQuery>(ME_QUERY);\n};\n",["149","150"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/edit-profile.tsx",["151","152"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"../../components/button\";\nimport { FormError } from \"../../components/form-error\";\nimport { useMe } from \"../../hooks/useMe\";\nimport {\n  editProfile,\n  editProfileVariables,\n} from \"../../__generated__/editProfile\";\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfile($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\ninterface IFormProps {\n  email?: string;\n  password?: string;\n}\n\nexport const EditProfile = () => {\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    errors,\n  } = useForm<IFormProps>({\n    mode: \"onChange\",\n    defaultValues: {\n      email: userData?.me.email,\n    },\n  });\n  const onSubmit = () => {\n    const { email, password } = getValues();\n    editProfileTrg({\n      variables: {\n        input: {\n          email,\n          ...(password !== \"\" && { password }),\n        },\n      },\n    });\n  };\n  const onCompleted = (data: editProfile) => {\n    const {\n      editProfile: { ok },\n    } = data;\n    if (ok && userData) {\n      const {\n        me: { email: prevEmail, id },\n      } = userData;\n      const { email: newEmail } = getValues();\n      if (prevEmail !== newEmail) {\n        client.writeFragment({\n          id: `UserEntity:${id}`,\n          fragment: gql`\n            fragment EditedUser on UserEntity {\n              verified\n              email\n            }\n          `,\n          data: {\n            email: newEmail,\n            verified: false,\n          },\n        });\n      }\n    }\n  };\n  const [editProfileTrg, { data, loading, error }] = useMutation<\n    editProfile,\n    editProfileVariables\n  >(EDIT_PROFILE_MUTATION, {\n    onCompleted,\n  });\n  return (\n    <div className=\"flex flex-col h-screen mt-52 items-center px-5\">\n      <Helmet>\n        <title>Edit Profile | Higawari Eats</title>\n      </Helmet>\n      <h4 className=\"font-semibold text-2xl mb-3\">プロフィール</h4>\n      <form\n        className=\"grid gap-3 mt-5 w-full max-w-screen-sm mb-4\"\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <input\n          ref={register({\n            required: \"メールを入力して下さい。\",\n            pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          })}\n          required\n          name=\"email\"\n          placeholder=\"メール\"\n          type=\"email\"\n          className=\"inputCss\"\n        />\n        {errors.email?.type === \"pattern\" && (\n          <FormError\n            errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n          />\n        )}\n        {errors.email?.message && (\n          <FormError errorMessage={errors.email?.message} />\n        )}\n        <input\n          ref={register({\n            minLength: 8,\n          })}\n          name=\"password\"\n          placeholder=\"パスワード\"\n          type=\"password\"\n          className=\"inputCss\"\n        />\n        {errors.password?.type === \"minLength\" && (\n          <FormError errorMessage={\"パスワードを8文字以上入力して下さい。\"} />\n        )}\n        {errors.password?.message && (\n          <FormError errorMessage={errors.password?.message} />\n        )}\n        <Button\n          canClick={formState.isValid}\n          loading={loading}\n          actionText={\"更新\"}\n        />\n      </form>\n    </div>\n  );\n};\n",["153","154"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/restaurant.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/search.tsx",["155","156"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport {\n  searchRestaurant,\n  searchRestaurantVariables,\n} from \"../../__generated__/searchRestaurant\";\n\nconst SEARCH_RESTAURANT = gql`\n  query searchRestaurant($input: SearchRestaurantInput!) {\n    searchRestaurant(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\nexport const Search = () => {\n  const history = useHistory();\n  const location = useLocation();\n  //lazy query\n  //lazy queryは一般的なqueryとは違う物を返す => queryTuple\n  const [queryReady, { loading, data, called }] = useLazyQuery<\n    searchRestaurant,\n    searchRestaurantVariables\n  >(SEARCH_RESTAURANT);\n  useEffect(() => {\n    const [_, query] = location.search.split(\"?term=\");\n    if (!query) {\n      //history.push & history.replaceの違いはreplaceの場合history APIに追加されない（履歴）\n      return history.replace(\"/\");\n    }\n    queryReady({\n      variables: {\n        input: {\n          page: 1,\n          query,\n        },\n      },\n    });\n  }, [history, location.search]);\n  console.log(loading, data, called);\n  return (\n    <div>\n      <Helmet>\n        <title>Search | Higawari Eats</title>\n      </Helmet>\n      search page\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/constants.ts",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/fragments.ts",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/category.tsx",["157","158"],"import { gql, useQuery } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { category, categoryVariables } from \"../../__generated__/category\";\n\nconst CATEGORY_QUERY = gql`\n  query category($input: CategoryInput!) {\n    category(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n      category {\n        ...CategoryParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${CATEGORY_FRAGMENT}\n`;\n\ninterface IPProps {\n  slug: string;\n}\n\nexport const Category = () => {\n  //   const location = useLocation();\n  //onlyパラメーターだけ欲しい時,useLocationより楽\n  const params = useParams<IPProps>();\n  const { data, loading } = useQuery<category, categoryVariables>(\n    CATEGORY_QUERY,\n    {\n      variables: {\n        input: {\n          slug: params.slug,\n          page: 1,\n        },\n      },\n    }\n  );\n  console.log(data, loading);\n  return <div>Category</div>;\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurant.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/category-list.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/my-restaurants.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/add-restaurants.tsx",["159","160"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"../../components/button\";\nimport { FormError } from \"../../components/form-error\";\nimport {\n  createRestaurants,\n  createRestaurantsVariables,\n} from \"../../__generated__/createRestaurants\";\nimport { MY_RESTAURANTS_QUERY } from \"./my-restaurants\";\n\nconst CREATE_RESTAURANT_MUTATION = gql`\n  mutation createRestaurants($input: CreateRestaurantInput!) {\n    createRestaurants(input: $input) {\n      ok\n      error\n      restaurantId\n    }\n  }\n`;\n\ninterface IFormProps {\n  name: string;\n  address: string;\n  categoryName: string;\n  file: FileList;\n}\n\nexport const AddRestaurant = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const onCompleted = (data: createRestaurants) => {\n    const {\n      createRestaurants: { ok, restaurantId, error },\n    } = data;\n    if (ok) {\n      const { file, name, categoryName, address } = getValues();\n      setUploading(false);\n      const queryResult = client.readQuery({ query: MY_RESTAURANTS_QUERY });\n      //fake cache -> It doesnt touch the API\n      client.writeQuery({\n        query: MY_RESTAURANTS_QUERY,\n        data: {\n          myRestaurants: {\n            ...queryResult.myRestaurants,\n            restaurants: [\n              {\n                address,\n                category: {\n                  __typename: \"CategoryEntity\",\n                  name: categoryName,\n                },\n                coverImg: imageUrl,\n                id: restaurantId,\n                isPromoted: false,\n                name,\n                __typename: \"RestaurantEntity\",\n              },\n              ...queryResult.myRestaurants.restaurants,\n            ],\n          },\n        },\n      });\n      history.push(\"/\");\n    }\n  };\n  const [createRestaurantMutation, { data }] = useMutation<\n    createRestaurants,\n    createRestaurantsVariables\n  >(CREATE_RESTAURANT_MUTATION, { onCompleted });\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    errors,\n  } = useForm<IFormProps>({ mode: \"onChange\" });\n  //useState\n  const [uploading, setUploading] = useState(false);\n  //onSubmit\n  const onSubmit = async () => {\n    try {\n      setUploading(true);\n      const { file, name, categoryName, address } = getValues();\n      const actualFile = file[0];\n      const formBody = new FormData();\n      formBody.append(\"file\", actualFile);\n      console.log(name, address);\n      //request\n      const { url: coverImg } = await (\n        await fetch(\"http://localhost:4000/uploads/\", {\n          method: \"POST\",\n          body: formBody,\n        })\n      ).json();\n      setImageUrl(coverImg);\n      createRestaurantMutation({\n        variables: {\n          input: {\n            name,\n            categoryName,\n            address,\n            coverImg,\n          },\n        },\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    //   input nameはpropsのfield名と一緒にする事\n    <div className=\"commonContainer w-full max-w-screen-sm flex flex-col items-center px-5\">\n      <Helmet>\n        <title> Create Restaurant | Higawari Eats</title>\n      </Helmet>\n      <h4 className=\"font-semibold text-2xl mb-3\">レストラン作成</h4>\n      <form\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"grid gap-3 mt-5 w-full mb-4\"\n      >\n        <input\n          className=\"inputCss\"\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"商名\"\n          ref={register({ required: \"入力が必要です。\", minLength: 4 })}\n        />\n        {errors.name?.type === \"minLength\" && (\n          <FormError errorMessage={\"4文字以上入力してください。\"} />\n        )}\n        <input\n          className=\"inputCss\"\n          type=\"text\"\n          name=\"address\"\n          placeholder=\"住所\"\n          ref={register({ required: \"入力が必要です。\" })}\n        />\n        <input\n          className=\"inputCss\"\n          type=\"text\"\n          name=\"categoryName\"\n          placeholder=\"カテゴリー名\"\n          ref={register({ required: \"入力が必要です。\" })}\n        />\n        <input\n          type=\"file\"\n          name=\"file\"\n          accept=\"image/*\"\n          ref={register({ required: true })}\n        />\n        <Button\n          loading={uploading}\n          canClick={formState.isValid}\n          actionText=\"作成\"\n        />\n        {data?.createRestaurants?.error && (\n          <FormError errorMessage={data.createRestaurants.error} />\n        )}\n      </form>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/my-restaurant.tsx",["161","162","163","164"],"import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Dish } from \"../../components/dish\";\nimport {\n  MENU_FRAGMENT,\n  ORDERS_FRAGMENT,\n  RESTAURANT_FRAGMENT,\n} from \"../../fragments\";\nimport {\n  myRestaurant,\n  myRestaurantVariables,\n} from \"../../__generated__/myRestaurant\";\nimport {\n  VictoryAxis,\n  VictoryBar,\n  VictoryChart,\n  VictoryLabel,\n  VictoryLine,\n  VictoryPie,\n  VictoryTheme,\n  VictoryTooltip,\n  VictoryVoronoiContainer,\n} from \"victory\";\n\nexport const MY_RESTAURANT_QUERY = gql`\n  query myRestaurant($input: MyRestaurantInput!) {\n    myRestaurant(input: $input) {\n      error\n      ok\n      restaurant {\n        ...RestaurantParts\n        menu {\n          ...MenuParts\n        }\n        orders {\n          ...OrderParts\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${MENU_FRAGMENT}\n  ${ORDERS_FRAGMENT}\n`;\n\ninterface IParams {\n  id: string;\n}\n\nexport const MyRestaurant = () => {\n  const { id } = useParams<IParams>();\n  const { data, error } = useQuery<myRestaurant, myRestaurantVariables>(\n    MY_RESTAURANT_QUERY,\n    {\n      variables: {\n        input: {\n          id: parseInt(id),\n        },\n      },\n    }\n  );\n  console.log(data);\n  const chartData = [\n    { x: 1000000, y: 1000 },\n    { x: 3000000, y: 2000 },\n    { x: 2000000, y: 3000 },\n  ];\n  return (\n    <div>\n      <Helmet>\n        <title>\n          {data?.myRestaurant.restaurant?.name || \"Loading...\"} | Nuber Eats\n        </title>\n      </Helmet>\n      <div\n        className=\"bg-gray-400 py-28 bg-center bg-cover\"\n        style={{\n          backgroundImage: `url(${data?.myRestaurant.restaurant?.coverImg})`,\n        }}\n      ></div>\n      <div className=\"commonContainer mt-10\">\n        <h2 className=\"text-4xl font-medium mb-10\">\n          {data?.myRestaurant.restaurant?.name || \"Loading...\"}\n        </h2>\n        <Link\n          to={`/restaurant/${id}/add-menu`}\n          className=\"mr-8 text-white bg-gray-800 py-3 px-10\"\n        >\n          メニューを追加 &rarr;\n        </Link>\n        <Link to={\"\"} className=\"text-white bg-yellow-500 py-3 px-10\">\n          プロモション購入 &rarr;\n        </Link>\n        <div className=\"mt-10\">\n          {data?.myRestaurant.restaurant?.menu.length === 0 ? (\n            <h4 className=\"text-xl mb-5\">メニューがありません</h4>\n          ) : (\n            <div className=\"md:grid grid-cols-3 gap-x-7 gap-y-10 mt-8\">\n              {data?.myRestaurant.restaurant?.menu.map((menu) => (\n                <Dish\n                  name={menu.name}\n                  description={menu.description}\n                  price={menu.price}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n        {/*  */}\n        <div className=\"mt-20 mb-10\">\n          <h4 className=\"text-center text-2xl font-medium\">売上レポート</h4>\n          <div className=\"mt-10\">\n            <VictoryChart\n              theme={VictoryTheme.material}\n              height={500}\n              width={window.innerWidth - 100}\n              domainPadding={30}\n              containerComponent={<VictoryVoronoiContainer />}\n            >\n              <VictoryLine\n                interpolation=\"linear\"\n                labels={({ datum }) => `${datum.y}円`}\n                labelComponent={\n                  <VictoryTooltip\n                    flyoutPadding={20}\n                    renderInPortal\n                    style={\n                      {\n                        fontSize: 20,\n                        fill: \"#ff9f43\",\n                      } as any\n                    }\n                  />\n                }\n                style={{\n                  data: {\n                    strokeWidth: 5,\n                  },\n                }}\n                data={data?.myRestaurant.restaurant?.orders.map((order) => ({\n                  x: order.createdAt,\n                  y: order.total,\n                }))}\n              />\n              <VictoryAxis\n                tickLabelComponent={<VictoryLabel renderInPortal />}\n                style={{\n                  tickLabels: { fontSize: 20, fill: \"#ff9f43\" } as any,\n                }}\n                dependentAxis\n                offsetX={80}\n                tickFormat={(money) => `${money / 1000}千円`}\n              />\n              <VictoryAxis\n                style={{\n                  tickLabels: { fontSize: 20 } as any,\n                }}\n                tickFormat={(date) => new Date(date).toLocaleDateString(\"jp\")}\n              />\n            </VictoryChart>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/owner/add-menu.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/dish.tsx",[],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"165","replacedBy":"169"},{"ruleId":"167","replacedBy":"170"},{"ruleId":"165","replacedBy":"171"},{"ruleId":"167","replacedBy":"172"},{"ruleId":"165","replacedBy":"173"},{"ruleId":"167","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":77,"column":9,"nodeType":"177","endLine":77,"endColumn":58},{"ruleId":"178","severity":1,"message":"179","line":56,"column":16,"nodeType":"180","messageId":"181","endLine":56,"endColumn":21},{"ruleId":"165","replacedBy":"182"},{"ruleId":"167","replacedBy":"183"},{"ruleId":"165","replacedBy":"184"},{"ruleId":"167","replacedBy":"185"},{"ruleId":"178","severity":1,"message":"186","line":4,"column":22,"nodeType":"180","messageId":"181","endLine":4,"endColumn":33},{"ruleId":"178","severity":1,"message":"179","line":26,"column":22,"nodeType":"180","messageId":"181","endLine":26,"endColumn":27},{"ruleId":"178","severity":1,"message":"187","line":56,"column":12,"nodeType":"180","messageId":"181","endLine":56,"endColumn":13},{"ruleId":"188","severity":1,"message":"189","line":64,"column":6,"nodeType":"190","endLine":64,"endColumn":8,"suggestions":"191"},{"ruleId":"178","severity":1,"message":"192","line":2,"column":8,"nodeType":"180","messageId":"181","endLine":2,"endColumn":13},{"ruleId":"165","replacedBy":"193"},{"ruleId":"167","replacedBy":"194"},{"ruleId":"178","severity":1,"message":"195","line":79,"column":28,"nodeType":"180","messageId":"181","endLine":79,"endColumn":32},{"ruleId":"178","severity":1,"message":"179","line":79,"column":43,"nodeType":"180","messageId":"181","endLine":79,"endColumn":48},{"ruleId":"165","replacedBy":"196"},{"ruleId":"167","replacedBy":"197"},{"ruleId":"178","severity":1,"message":"187","line":36,"column":12,"nodeType":"180","messageId":"181","endLine":36,"endColumn":13},{"ruleId":"188","severity":1,"message":"198","line":49,"column":6,"nodeType":"190","endLine":49,"endColumn":32,"suggestions":"199"},{"ruleId":"178","severity":1,"message":"200","line":2,"column":10,"nodeType":"180","messageId":"181","endLine":2,"endColumn":19},{"ruleId":"178","severity":1,"message":"186","line":3,"column":10,"nodeType":"180","messageId":"181","endLine":3,"endColumn":21},{"ruleId":"178","severity":1,"message":"179","line":37,"column":46,"nodeType":"180","messageId":"181","endLine":37,"endColumn":51},{"ruleId":"178","severity":1,"message":"201","line":40,"column":15,"nodeType":"180","messageId":"181","endLine":40,"endColumn":19},{"ruleId":"178","severity":1,"message":"202","line":17,"column":3,"nodeType":"180","messageId":"181","endLine":17,"endColumn":13},{"ruleId":"178","severity":1,"message":"203","line":21,"column":3,"nodeType":"180","messageId":"181","endLine":21,"endColumn":13},{"ruleId":"178","severity":1,"message":"179","line":54,"column":17,"nodeType":"180","messageId":"181","endLine":54,"endColumn":22},{"ruleId":"178","severity":1,"message":"204","line":65,"column":9,"nodeType":"180","messageId":"181","endLine":65,"endColumn":18},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],["205"],["206"],["205"],["206"],["205"],["206"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar",["205"],["206"],["205"],["206"],"'useLocation' is defined but never used.","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verifyTrg'. Either include it or remove the dependency array.","ArrayExpression",["207"],"'React' is defined but never used.",["205"],["206"],"'data' is assigned a value but never used.",["205"],["206"],"React Hook useEffect has a missing dependency: 'queryReady'. Either include it or remove the dependency array.",["208"],"'useEffect' is defined but never used.","'file' is assigned a value but never used.","'VictoryBar' is defined but never used.","'VictoryPie' is defined but never used.","'chartData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},"Update the dependencies array to be: [verifyTrg]",{"range":"213","text":"214"},"Update the dependencies array to be: [history, location.search, queryReady]",{"range":"215","text":"216"},[1634,1636],"[verifyTrg]",[1269,1295],"[history, location.search, queryReady]"]