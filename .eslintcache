[{"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx":"1","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts":"2","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx":"3","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts":"4","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx":"5","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx":"6","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx":"7","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx":"8","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx":"9","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx":"10","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx":"11","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx":"12","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/header.tsx":"13","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/confirm-email.tsx":"14","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/hooks/useMe.tsx":"15","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/edit-profile.tsx":"16","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts":"17"},{"size":588,"mtime":1611482864802,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1611383438987,"results":"20","hashOfConfig":"19"},{"size":584,"mtime":1611623515161,"results":"21","hashOfConfig":"19"},{"size":1041,"mtime":1611576566412,"results":"22","hashOfConfig":"19"},{"size":1395,"mtime":1611664447298,"results":"23","hashOfConfig":"19"},{"size":4304,"mtime":1611671986183,"results":"24","hashOfConfig":"19"},{"size":619,"mtime":1611415477967,"results":"25","hashOfConfig":"19"},{"size":4836,"mtime":1611579055580,"results":"26","hashOfConfig":"19"},{"size":239,"mtime":1611672055964,"results":"27","hashOfConfig":"19"},{"size":506,"mtime":1611666849342,"results":"28","hashOfConfig":"19"},{"size":577,"mtime":1611657736354,"results":"29","hashOfConfig":"19"},{"size":83,"mtime":1611623226632,"results":"30","hashOfConfig":"19"},{"size":1571,"mtime":1611667064143,"results":"31","hashOfConfig":"19"},{"size":1868,"mtime":1611641436863,"results":"32","hashOfConfig":"19"},{"size":311,"mtime":1611630339155,"results":"33","hashOfConfig":"19"},{"size":3549,"mtime":1611671977147,"results":"34","hashOfConfig":"19"},{"size":853,"mtime":1611668537397,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1o4rm3h",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/App.tsx",[],["76","77"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/reportWebVitals.ts",[],["78","79"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-out-router.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/apollo.ts",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/routers/logged-in-router.tsx",["80"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/login.tsx",["81"],"import { Helmet } from \"react-helmet-async\";\nimport higawariLogo from \"../images/logo.svg\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { FormError } from \"../components/form-error\";\nimport {\n  LoginMutation,\n  LoginMutationVariables,\n} from \"../__generated__/LoginMutation\";\nimport { Button } from \"../components/button\";\nimport { Link } from \"react-router-dom\";\nimport { authToken, isLoggedInVar } from \"../apollo\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\n\ninterface ILoginForm {\n  email: string;\n  password: string;\n}\n\nconst LOGIN_MUTAITION = gql`\n  mutation LoginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      error\n      ok\n      token\n    }\n  }\n`;\n\nconst Login = () => {\n  const {\n    register,\n    getValues,\n    handleSubmit,\n    errors,\n    formState,\n  } = useForm<ILoginForm>({\n    mode: \"onChange\",\n  });\n  const onCompleted = (data: LoginMutation) => {\n    const {\n      login: { ok, token },\n    } = data;\n    if (ok && token) {\n      console.log(token);\n      localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n      authToken(token);\n      isLoggedInVar(true);\n    }\n  };\n  //useMutationの１番目のargsはmutation function, triggerの役割を果たす。\n  //useMutationの2番目のargsはobject, {error, loading, data}\n  const [loginTrg, { data: loginMutationResult, loading }] = useMutation<\n    LoginMutation,\n    LoginMutationVariables\n  >(LOGIN_MUTAITION, { onCompleted });\n  const onSubmit = () => {\n    if (!loading) {\n      const { email, password } = getValues();\n      loginTrg({\n        variables: {\n          loginInput: {\n            email,\n            password,\n          },\n        },\n      });\n    }\n  };\n  return (\n    <div className=\"h-screen flex flex-col items-center mt-5 lg:mt-28\">\n      <Helmet>\n        <title>Higawari Eats | Login</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center px-5\">\n        <img src={higawariLogo} className=\" w-72 mb-5\" />\n        <h4 className=\"w-full text-left font-medium text-2xl mb-5\">\n          ご利用いただきありがとうございます\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-4\"\n        >\n          <input\n            ref={register({\n              required: \"メールを入力して下さい。\",\n              pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            })}\n            required\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"メール\"\n            className=\"inputCss\"\n          />\n          {errors.email?.type === \"pattern\" && (\n            <FormError\n              errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n            />\n          )}\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          <input\n            ref={register({\n              required: \"パスワードを入力して下さい。\",\n              minLength: 8,\n            })}\n            required\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"パスワード\"\n            className=\"inputCss\"\n          />\n          {errors.password?.type === \"minLength\" && (\n            <FormError errorMessage={\"パスワードを8文字以上入力して下さい。\"} />\n          )}\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText=\"LogIn\"\n          />\n          {loginMutationResult?.login.error && (\n            <FormError errorMessage={loginMutationResult.login.error} />\n          )}\n        </form>\n        <div>\n          Higawariのご利用は初めてですか?{\" \"}\n          <Link\n            to=\"create-account\"\n            className=\"text-yellow-600 text-opacity-75 hover:underline\"\n          >\n            アカウントを作成\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/index.tsx",[],["82","83"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/create-account.tsx",["84"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/form-error.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/button.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/404.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/client/restaurants.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/components/header.tsx",[],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/confirm-email.tsx",["85","86","87","88"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useMe } from \"../../hooks/useMe\";\nimport {\n  verifyEmail,\n  verifyEmailVariables,\n} from \"../../__generated__/verifyEmail\";\n\nconst VERIFY_EMAIL_MUTATION = gql`\n  mutation verifyEmail($input: VerifyEmailInput!) {\n    verifyEmail(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\nexport const ConfirmEmail = () => {\n  const history = useHistory();\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n  const onCompleted = (data: verifyEmail) => {\n    const {\n      verifyEmail: { error, ok },\n    } = data;\n    if (ok && userData?.me.id) {\n      //cacheを直接修正する方法\n      client.writeFragment({\n        id: `UserEntity:${userData.me.id}`,\n        fragment: gql`\n          fragment VerifiedUser on UserEntity {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      history.push(\"/\");\n    }\n  };\n  const [verifyTrg] = useMutation<verifyEmail, verifyEmailVariables>(\n    VERIFY_EMAIL_MUTATION,\n    {\n      onCompleted,\n    }\n  );\n  // hrefのコードを持ってくる１番目のoption\n  // const location = useLocation();\n  useEffect(() => {\n    // console.log(location.search);\n    const [_, code] = window.location.href.split(\"confirm?=\");\n    verifyTrg({\n      variables: {\n        input: {\n          code,\n        },\n      },\n    });\n  }, []);\n  return (\n    <div className=\"flex flex-col text-center h-screen mt-60\">\n      <h2 className=\"text-lg font-semibold mb-2\">\n        アカウントを認証しています。\n      </h2>\n      <h4 className=\"text-gray-700\">\n        少々お待ちください。このページから離れないでください。\n      </h4>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/hooks/useMe.tsx",["89"],"/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/pages/user/edit-profile.tsx",["90","91"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"../../components/button\";\nimport { FormError } from \"../../components/form-error\";\nimport { useMe } from \"../../hooks/useMe\";\nimport {\n  editProfile,\n  editProfileVariables,\n} from \"../../__generated__/editProfile\";\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfile($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\ninterface IFormProps {\n  email?: string;\n  password?: string;\n}\n\nexport const EditProfile = () => {\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    errors,\n  } = useForm<IFormProps>({\n    mode: \"onChange\",\n    defaultValues: {\n      email: userData?.me.email,\n    },\n  });\n  const onSubmit = () => {\n    const { email, password } = getValues();\n    editProfileTrg({\n      variables: {\n        input: {\n          email,\n          ...(password !== \"\" && { password }),\n        },\n      },\n    });\n  };\n  const onCompleted = (data: editProfile) => {\n    const {\n      editProfile: { ok },\n    } = data;\n    if (ok && userData) {\n      const {\n        me: { email: prevEmail, id },\n      } = userData;\n      const { email: newEmail } = getValues();\n      if (prevEmail !== newEmail) {\n        client.writeFragment({\n          id: `UserEntity:${id}`,\n          fragment: gql`\n            fragment EditedUser on UserEntity {\n              verified\n              email\n            }\n          `,\n          data: {\n            email: newEmail,\n            verified: false,\n          },\n        });\n      }\n    }\n  };\n  const [editProfileTrg, { data, loading, error }] = useMutation<\n    editProfile,\n    editProfileVariables\n  >(EDIT_PROFILE_MUTATION, {\n    onCompleted,\n  });\n  return (\n    <div className=\"flex flex-col h-screen mt-52 items-center\">\n      <h4 className=\"font-semibold text-2xl mb-3\">プロフィール</h4>\n      <form\n        className=\"grid gap-3 mt-5 w-full max-w-screen-sm mb-4\"\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <input\n          ref={register({\n            required: \"メールを入力して下さい。\",\n            pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          })}\n          required\n          name=\"email\"\n          placeholder=\"メール\"\n          type=\"email\"\n          className=\"inputCss\"\n        />\n        {errors.email?.type === \"pattern\" && (\n          <FormError\n            errorMessage={\"メールの形式に合わせてご入力して下さい。\"}\n          />\n        )}\n        {errors.email?.message && (\n          <FormError errorMessage={errors.email?.message} />\n        )}\n        <input\n          ref={register({\n            minLength: 8,\n          })}\n          name=\"password\"\n          placeholder=\"パスワード\"\n          type=\"password\"\n          className=\"inputCss\"\n        />\n        {errors.password?.type === \"minLength\" && (\n          <FormError errorMessage={\"パスワードを8文字以上入力して下さい。\"} />\n        )}\n        {errors.password?.message && (\n          <FormError errorMessage={errors.password?.message} />\n        )}\n        <Button\n          canClick={formState.isValid}\n          loading={loading}\n          actionText={\"更新\"}\n        />\n      </form>\n    </div>\n  );\n};\n","/Users/takeo/code/React/ReactJS/higawari-eats-frontend/src/__generated__/globalTypes.ts",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"92","replacedBy":"96"},{"ruleId":"94","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":4,"column":3,"nodeType":"100","messageId":"101","endLine":4,"endColumn":11},{"ruleId":"102","severity":1,"message":"103","line":77,"column":9,"nodeType":"104","endLine":77,"endColumn":58},{"ruleId":"92","replacedBy":"105"},{"ruleId":"94","replacedBy":"106"},{"ruleId":"98","severity":1,"message":"107","line":56,"column":16,"nodeType":"100","messageId":"101","endLine":56,"endColumn":21},{"ruleId":"98","severity":1,"message":"108","line":3,"column":22,"nodeType":"100","messageId":"101","endLine":3,"endColumn":33},{"ruleId":"98","severity":1,"message":"107","line":25,"column":22,"nodeType":"100","messageId":"101","endLine":25,"endColumn":27},{"ruleId":"98","severity":1,"message":"109","line":53,"column":12,"nodeType":"100","messageId":"101","endLine":53,"endColumn":13},{"ruleId":"110","severity":1,"message":"111","line":61,"column":6,"nodeType":"112","endLine":61,"endColumn":8,"suggestions":"113"},{"ruleId":"98","severity":1,"message":"114","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":13},{"ruleId":"98","severity":1,"message":"115","line":78,"column":28,"nodeType":"100","messageId":"101","endLine":78,"endColumn":32},{"ruleId":"98","severity":1,"message":"107","line":78,"column":43,"nodeType":"100","messageId":"101","endLine":78,"endColumn":48},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],["116"],["117"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["116"],["117"],"'error' is assigned a value but never used.","'useLocation' is defined but never used.","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verifyTrg'. Either include it or remove the dependency array.","ArrayExpression",["118"],"'React' is defined but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},"Update the dependencies array to be: [verifyTrg]",{"range":"121","text":"122"},[1472,1474],"[verifyTrg]"]